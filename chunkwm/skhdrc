#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# focus window
shift + alt - j : chunkc tiling::window --focus next
shift + alt - k : chunkc tiling::window --focus prev

# swap window
shift + ctrl + alt - j : chunkc tiling::window --swap next
shift + ctrl + alt - k : chunkc tiling::window --swap prev

# fast focus desktop
shift + alt - 1 : chunkc tiling::desktop --focus 1
shift + alt - 2 : chunkc tiling::desktop --focus 2
shift + alt - 3 : chunkc tiling::desktop --focus 3
shift + alt - 4 : chunkc tiling::desktop --focus 4
shift + alt - 5 : chunkc tiling::desktop --focus 5
shift + alt - 6 : chunkc tiling::desktop --focus 6
shift + alt - 7 : chunkc tiling::desktop --focus 7

# send window to desktop and follow focus
shift + ctrl + alt - 1 : chunkc tiling::window --send-to-desktop 1; chunkc tiling::desktop --focus 1
shift + ctrl + alt - 2 : chunkc tiling::window --send-to-desktop 2; chunkc tiling::desktop --focus 2
shift + ctrl + alt - 3 : chunkc tiling::window --send-to-desktop 3; chunkc tiling::desktop --focus 3
shift + ctrl + alt - 4 : chunkc tiling::window --send-to-desktop 4; chunkc tiling::desktop --focus 4
shift + ctrl + alt - 5 : chunkc tiling::window --send-to-desktop 5; chunkc tiling::desktop --focus 5
shift + ctrl + alt - 6 : chunkc tiling::window --send-to-desktop 6; chunkc tiling::desktop --focus 6
shift + ctrl + alt - 7 : chunkc tiling::window --send-to-desktop 7; chunkc tiling::desktop --focus 7
shift + ctrl + alt - left : chunkc tiling::window --send-to-desktop prev; chunkc tiling::desktop --focus prev
shift + ctrl + alt - right : chunkc tiling::window --send-to-desktop next; chunkc tiling::desktop --focus next

# focus monitor
shift + alt - w  : chunkc tiling::monitor -f 1
shift + alt - e  : chunkc tiling::monitor -f 2
shift + alt - r  : chunkc tiling::monitor -f 3
shift + alt - q  : chunkc tiling::monitor -f 4

# send window to monitor and follow focus
shift + ctrl + alt - w  : chunkc tiling::window --send-to-monitor 1; chunkc tiling::monitor -f 1
shift + ctrl + alt - e  : chunkc tiling::window --send-to-monitor 2; chunkc tiling::monitor -f 2
shift + ctrl + alt - r  : chunkc tiling::window --send-to-monitor 3; chunkc tiling::monitor -f 3
shift + ctrl + alt - q  : chunkc tiling::window --send-to-monitor 4; chunkc tiling::monitor -f 4
shift + ctrl + alt - h  : chunkc tiling::window --send-to-monitor prev; chunkc tiling::monitor -f prev
shift + ctrl + alt - l  : chunkc tiling::window --send-to-monitor next; chunkc tiling::monitor -f next

# float / unfloat window and center on screen
shift + alt - t : chunkc tiling::window --toggle float;\
                  chunkc tiling::window --grid-layout 4:4:1:1:2:2

# change layout of desktop
shift + alt - space : ~/.local/bin/toggle-chunkwm-layout
