# -*- mode: sh -*-

# zshrc
# author: Seong Yong-ju <sei40kr@gmail.com>

if [[ -z "$TMUX" && -z "$INSIDE_EMACS" && -z "$EMACS" && -z "$VIM" && "$TERM" != dumb ]]; then
    export LC_ALL
    tmux new-session
    exit
fi

__main() {
    autoload -Uz \
             kca \
             kres \
             pyclean

    if [[ -n "$TMUX" || -n "$INSIDE_EMACS" || -n "$EMACS" || -n "$VIM" ]]; then
        export PAGER=cat
    fi
    if [[ "${+commands[vim]}" == 1 && -f "${HOME}/.vim/vimrc" ]]; then
        export MANPAGER='vim -c MANPAGER -'
    fi

    # Sync the history via Dropbox
    if [[ -d "${HOME}/Dropbox" ]]; then
        HISTFILE="${HOME}/Dropbox/zsh_history"
    else
        HISTFILE="${ZDOTDIR}/.zsh_history"
    fi
    HISTSIZE=10000
    SAVEHIST=10000

    setopt APPEND_HISTORY
    setopt AUTO_CD
    setopt AUTO_LIST
    setopt AUTO_MENU
    setopt AUTO_PUSHD
    setopt AUTO_PARAM_KEYS
    setopt AUTO_PARAM_SLASH
    setopt AUTO_RESUME
    setopt EQUALS
    setopt EXTENDED_HISTORY
    setopt GLOB_DOTS
    setopt HIST_IGNORE_ALL_DUPS
    setopt INTERACTIVE_COMMENTS
    setopt NO_BEEP
    setopt NUMERIC_GLOB_SORT
    setopt PRINT_EIGHT_BIT
    setopt PROMPT_SUBST
    setopt PUSHD_IGNORE_DUPS
    setopt SHARE_HISTORY
    unsetopt LIST_BEEP

    bindkey -e

    is_macos() {
        [[ "$OSTYPE" == darwin* ]]
    }

    is_arch() {
        [[ -f /etc/arch-release ]]
    }

    . "${ZDOTDIR}/custom-history.zsh"


    . "${HOME}/.zinit/bin/zinit.zsh"

    HYPHEN_INSENSITIVE=true
    zinit ice svn multisrc'{completion,clipboard}.zsh'
    zinit snippet OMZ::lib

    zinit snippet OMZ::plugins/zsh_reload/zsh_reload.plugin.zsh

    zinit ice pick'' blockf wait''
    zinit light zsh-users/zsh-completions

    zinit ice trigger-load'!cd-gitroot'
    zinit light mollifier/cd-gitroot
    zinit ice trigger-load'!extract;!x'
    zinit snippet OMZ::plugins/extract/extract.plugin.zsh
    zinit snippet OMZ::plugins/rsync/rsync.plugin.zsh
    zinit snippet OMZ::plugins/nmap/nmap.plugin.zsh

    GH_CLONE_WORKSPACE_DIR="${HOME}/develop/workspace"
    zinit ice trigger-load'!gh-clone'
    zinit light _local/zsh-gh-clone


    ## OS-specific Plugins

    if is_arch; then
        zinit snippet OMZ::plugins/archlinux/archlinux.plugin.zsh
    fi


    ## Git

    zinit snippet OMZ::plugins/git/git.plugin.zsh
    zinit snippet OMZ::plugins/git-flow/git-flow.plugin.zsh


    ## Rust

    # Rustup
    if [[ "${+commands[rustup]}" == 1 ]]; then
        if [[ ! -f "${ZDOTDIR}/rustup_completion.zsh" ]]; then
            rustup completions zsh >"${ZDOTDIR}/rustup_completion.zsh"
        fi

        zinit ice wait''
        zinit snippet "${ZDOTDIR}/rustup_completion.zsh"
    fi

    # Cargo
    if [[ "${+commands[cargo]}" == 1 ]]; then
        if [[ ! -f "${ZDOTDIR}/completions/_cargo" ]]; then
            rustup completions zsh cargo >"${ZDOTDIR}/completions/_cargo"
        fi
    fi

    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/rust/_rust


    ## Go

    if [[ -n "$GOENV_ROOT" && -d "$GOENV_ROOT" ]]; then
        if [[ ! -f "${GOENV_ROOT}/zgoenv.zsh" ]]; then
            goenv init - --no-rehash zsh >"${GOENV_ROOT}/zgoenv.zsh"
        fi

        zinit snippet "${GOENV_ROOT}/zgoenv.zsh"
    fi

    zinit snippet OMZ::plugins/golang/golang.plugin.zsh


    ## Haskell

    zinit ice wait''
    zinit snippet OMZ::plugins/stack/stack.plugin.zsh
    zinit ice wait''
    zinit snippet OMZ::plugins/cabal/cabal.plugin.zsh


    ## Java

    zinit snippet OMZ::plugins/mvn/mvn.plugin.zsh
    zinit snippet OMZ::plugins/gradle/gradle.plugin.zsh


    ## Scala

    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/scala/_scala
    zinit ice svn
    zinit snippet OMZ::plugins/sbt


    ## Perl

    if [[ -n "$PERLBREW_ROOT" && -d "$PERLBREW_ROOT" ]]; then
        zinit ice wait''
        zinit snippet "${PERLBREW_ROOT}/etc/perlbrew-completion.bash"
    fi

    zinit snippet OMZ::plugins/perl/perl.plugin.zsh
    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/cpanm/_cpanm


    ## Python

    # pyenv
    if [[ -n "$PYENV_ROOT" && -d "$PYENV_ROOT" ]]; then
        if [[ ! -f "${PYENV_ROOT}/zpyenv.zsh" ]]; then
            {
                pyenv init - --no-rehash zsh
                pyenv virtualenv-init - zsh
            } >"${PYENV_ROOT}/zpyenv.zsh"
        fi

        zinit snippet "${PYENV_ROOT}/zpyenv.zsh"
    fi

    # Poetry
    if [[ "${+commands[poetry]}" == 1 ]]; then
        if [[ ! -f "${ZDOTDIR}/completions/_poetry" ]]; then
            poetry completion -- zsh >"${ZDOTDIR}/completions/_poetry"
        fi
    fi

    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/pip/_pip


    ## Ruby

    if [[ -n "$RBENV_ROOT" && -d "$RBENV_ROOT" ]]; then
        if [[ ! -f "${RBENV_ROOT}/zrbenv.zsh" ]]; then
            rbenv init - --no-rehash zsh >"${RBENV_ROOT}/zrbenv.zsh"
        fi

        zinit snippet "${RBENV_ROOT}/zrbenv.zsh"
    fi

    zinit snippet OMZ::plugins/ruby/ruby.plugin.zsh
    zinit ice svn
    zinit snippet OMZ::plugins/gem
    zinit ice wait''
    zinit snippet OMZ::plugins/rake-fast/rake-fast.plugin.zsh

    # Rails
    zinit snippet OMZ::plugins/rails/rails.plugin.zsh


    ## PHP

    zinit snippet OMZ::plugins/composer/composer.plugin.zsh
    zinit snippet OMZ::plugins/laravel/laravel.plugin.zsh
    zinit snippet OMZ::plugins/laravel5/laravel5.plugin.zsh


    ## Web Frontend

    zinit light _local/zsh-lazy-nvm
    zinit snippet OMZ::plugins/yarn/yarn.plugin.zsh

    zinit ice wait''
    zinit snippet OMZ::plugins/gulp/gulp.plugin.zsh

    # Karma
    if [[ "${+commands[karma]}" == 1 ]]; then
        if [[ ! -f "${ZDOTDIR}/karma_completion.zsh" ]]; then
            karma completion >"${ZDOTDIR}/karma_completion.zsh"
        fi

        zinit ice wait''
        zinit snippet "${ZDOTDIR}/karma_completion.zsh"
    fi

    # Gatsby
    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/gatsby/_gatsby

    # React Native
    zinit ice svn
    zinit snippet OMZ::plugins/react-native

    # Flutter
    zinit ice svn
    zinit snippet OMZ::plugins/flutter


    ## Database

    # Redis
    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/redis-cli/_redis-cli


    ## Continuous Integration

    # Docker
    zinit snippet OMZ::plugins/docker-compose/docker-compose.plugin.zsh
    if is_macos && [[ -d '/Applications/Docker.app' ]]; then
        zinit ice as'completion' wait'' multisrc'{docker,docker-compose}.zsh-completion'
        zinit light '/Applications/Docker.app/Contents/Resources/etc'
    fi

    # Code Climate
    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/codeclimate/_codeclimate

    # Travis CI Client
    if [[ -f "${HOME}/.travis/travis.sh" ]]; then
        zinit ice wait''
        zinit snippet "${HOME}/.travis/travis.sh"
    fi


    ## Infrastructure

    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/vagrant/_vagrant
    zinit snippet OMZ::plugins/ansible/ansible.plugin.zsh
    zinit ice as'completion' wait''
    zinit snippet OMZ::plugins/terraform/_terraform
    zinit snippet OMZ::plugins/kubectl/kubectl.plugin.zsh

    # Kubernetes
    if [[ "${+commands[kubectl]}" == 1 ]]; then
        if [[ ! -f "${ZDOTDIR}/kubectl_completion.zsh" ]]; then
            kubectl completion zsh >"${ZDOTDIR}/kubectl_completion.zsh"
        fi

        zinit ice wait''
        zinit snippet "${ZDOTDIR}/kubectl_completion.zsh"
    fi

    # AWS
    # TODO Add support for Linux environment
    if [[ -f /usr/local/bin/aws_zsh_completer.sh ]]; then
        zinit ice wait''
        zinit snippet /usr/local/bin/aws_zsh_completer.sh
    fi

    # gcloud
    if [[ -n "$CLOUDSDK_ROOT_DIR" && -d "$CLOUDSDK_ROOT_DIR" ]]; then
        zinit ice wait''
        zinit snippet "${CLOUDSDK_ROOT_DIR}/completion.zsh.inc"
    fi


    ## Others

    zinit ice wait'0' atinit'zpcompinit; zpcdreplay' lucid
    zinit light zdharma/fast-syntax-highlighting

    zinit ice wait'0' lucid
    zinit light -b hlissner/zsh-autopair

    zinit ice wait'0' lucid
    zinit light -b zsh-users/zsh-autosuggestions

    zinit ice wait'0' lucid
    zinit light -b zdharma/history-search-multi-word

    zinit light _local/zsh-run-help-collections

    zinit snippet OMZ::plugins/fancy-ctrl-z/fancy-ctrl-z.plugin.zsh

    zinit ice from'gh-r' as'program' mv'direnv* -> direnv' atinit'[[ -f zhook.zsh ]] || ./direnv hook zsh >zhook.zsh' src'zhook.zsh'
    zinit light direnv/direnv

    zinit light _local/zsh-ranger-cd
    bindkey '\ec' ranger-cd

    # FZF
    FZF_DEFAULT_OPTS='--height=15 --reverse --inline-info --color=dark --color=fg:-1,bg:-1,hl:#c678dd,fg+:#ffffff,bg+:#4b5263,hl+:#d858fe --color=info:#98c379,prompt:#61afef,pointer:#be5046,marker:#e5c07b,spinner:#61afef,header:#61afef'
    zinit ice bindmap'^R ->;\ec ->' multisrc'shell/{completion,key-bindings}.zsh'
    zinit light -b junegunn/fzf

    # FZF additional sources
    zinit light _local/zsh-fzf-docker
    zinit light _local/zsh-fzf-cd-dirs
    if [[ -z "$TMUX" ]]; then
        FZF_PROJECTS_WORKSPACE_DIRS=(
            "${HOME}/develop/workspace"
            "${GOPATH}/src/github.com"
        )
        FZF_PROJECTS_PROJECT_DIR_MAX_DEPTH=2
        FZF_PROJECTS_KNOWN_PROJECTS=(
            "${HOME}/.dotfiles"
            "${HOME}/.emacs.d"
            "${HOME}/.doom.d"
        )
        zinit light _local/zsh-fzf-projects

        zle -N fzf-projects

        bindkey '^xg' fzf-projects
        bindkey '^x^g' fzf-projects
    fi

    # Notification
    if is_macos; then
        zinit ice from'gh-r' as'program'
        zinit light julienXX/terminal-notifier
    fi
    zinit snippet OMZ::plugins/bgnotify/bgnotify.plugin.zsh

    # Other alias definitions
    . "${ZDOTDIR}/alias-defs.zsh"

    ## Theme & Appearance

    zinit ice from'gh-r' src'zstarship.zsh' atclone'./starship init zsh --print-full-init >zstarship.zsh' atpull'%atclone' atload'starship_precmd' as'program' nocompile'!'
    zinit light starship/starship

    zinit light _local/zsh-fast-alias-tips
}

if [[ "$TERM" == dumb ]]; then
    HISTSIZE=0
    SAVEHIST=0
else
    __main
fi
