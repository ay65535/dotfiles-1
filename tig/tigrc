# Settings for speeding up Tig in large repositories
#
# To use these settings copy the file to your HOME directory and include
# it from your ~/.tigrc file:
#
#	$ cp contrib/large-repo.tigrc ~/.tigrc.large
#	$ echo "source ~/.tigrc.large" >> ~/.tigrc

# Use Git's default (reverse chronological) order, never automatically
# use topo-order for the commit graph
set commit-order = default

# Limit number of commits loaded by default to 1000
set main-options = -n 1000

# Don't show staged and unstaged changes in the main view
set show-changes = no

# Optionally, use the old and faster but less acurate graph renderer
#set main-view-commit-title-graph = v1

# Vim-style keybindings for Tig
#
# To use these keybindings copy the file to your HOME directory and include
# it from your ~/.tigrc file:
#
#	$ cp contrib/vim.tigrc ~/.tigrc.vim
#	$ echo "source ~/.tigrc.vim" >> ~/.tigrc

bind generic h scroll-left
bind generic j move-down
bind generic k move-up
bind generic l scroll-right

bind generic g  none
bind generic gg move-first-line
bind generic gj next
bind generic gk previous
bind generic gp parent
bind generic gP back
bind generic gn view-next

bind main    G move-last-line
bind generic G move-last-line

bind generic <C-f> move-page-down
bind generic <C-b> move-page-up

bind generic v  none
bind generic vm view-main
bind generic vd view-diff
bind generic vl view-log
bind generic vt view-tree
bind generic vb view-blob
bind generic vx view-blame
bind generic vr view-refs
bind generic vs view-status
bind generic vu view-stage
bind generic vy view-stash
bind generic vg view-grep
bind generic vp view-pager
bind generic vh view-help

bind generic o  none
bind generic oo :toggle sort-order
bind generic os :toggle sort-field
bind generic on :toggle line-number
bind generic od :toggle date
bind generic oa :toggle author
bind generic og :toggle line-graphics
bind generic of :toggle file-name
bind generic op :toggle ignore-space
bind generic oi :toggle id
bind generic ot :toggle commit-title-overflow
bind generic oF :toggle file-filter
bind generic or :toggle commit-title-refs

bind generic @  none
bind generic @j :/^@@
bind generic @k :?^@@
bind generic @- :toggle diff-context -1
bind generic @+ :toggle diff-context +1

bind status  u  none
bind stage   u  none
bind generic uu status-update
bind generic ur status-revert
bind generic um status-merge
bind generic ul stage-update-line
bind generic us stage-split-chunk

bind generic c  none
bind generic cc !git commit
bind generic ca !?@git commit --amend --no-edit

bind generic K view-help
bind generic <C-w><C-w> view-next

# Bindings for git-flow.
#
# Flow bindings start with the capital F and then follow the first character of
# each operation. If executed from the refs view, the operations (that make
# sense to) work on the selected branch. Otherwise, they work on the currently
# checked out branch.
#
# Commands that finish a flow require confirmation to run. Commands that create
# a new flow prompt for user input and run when that input is accepted with no
# confirmation prompt.
#
# Note: Bindings assume the standard git-flow paths of feature, release, hotfix
# and support.
#
# To use these keybindings copy the file to your HOME directory and include it
# from your ~/.tigrc file:
#
#       $ cp contrib/git-flow.tigrc ~/.tigrc.git-flow
#       $ echo "source ~/.tigrc.git-flow" >> ~/.tigrc

# Get rid of default bindings for F, as that will be the entry point for all
# git-flow related commands with this binding.
bind main    F none
bind generic F none

# General
bind generic Fi ?git flow init

# Feature
bind generic Ffl !git flow feature
bind generic Ffs !git flow feature start "%(prompt New feature name: )"
bind generic Fff ?sh -c "git flow feature finish `echo %(repo:head) | sed -e s/feature.//`"
bind refs    Fff ?sh -c "git flow feature finish `echo %(branch) | sed -e s/feature.//`"

# Release
bind generic Frl !git flow release
bind generic Frs !git flow release start "%(prompt New release name: )"
bind generic Frf ?sh -c "git flow release finish `echo %(repo:head) | sed -e s/release.//`"
bind refs    Frf ?sh -c "git flow release finish `echo %(branch) | sed -e s/release.//`"

# Hot Fix
bind generic Fhl !git flow hotfix
bind generic Fhs !git flow hotfix start "%(prompt New hotfix name: )"
bind generic Fhf ?sh -c "git flow hotfix finish `echo %(repo:head) | sed -e s/hotfix.//`"
bind refs    Fhf ?sh -c "git flow hotfix finish `echo %(branch) | sed -e s/hotfix.//`"

# Support
bind generic Fsl !git flow support
bind refs    Fss !git flow support start "%(prompt New support name: )" %(branch)
