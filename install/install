#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

IFS=$'\n\t'

: "${XDG_CONFIG_HOME:=${HOME}/.config}"
: "${XDG_DATA_HOME:=${HOME}/.local/share}"

: "${XDG_PICTURES_DIR:=${HOME}/Pictures}"

: "${WORKSPACE_DIR:=${HOME}/develop/workspace}"

: "${ZDOTDIR:=${HOME}/.zsh}"

: "${DOOMDIR:=${HOME}/.doom.d}"

: "${NVM_DIR:=${HOME}/.nvm}"
: "${GOENV_ROOT:=${HOME}/.goenv}"
: "${GOPATH:=${HOME}/go/system}"
: "${PYENV_ROOT:=${HOME}/.pyenv}"
: "${RBENV_ROOT:=${HOME}/.rbenv}"
: "${PERLBREW_ROOT:=${HOME}/perl5/perlbrew}"
: "${R_ENVIRON_USER:=${XDG_CONFIG_HOME}/r/.Renviron}"
: "${R_PROFILE_USER:=${XDG_CONFIG_HOME}/r/.Rprofile.r}"

declare -A ZINIT
ZINIT[HOME_DIR]="${HOME}/.zinit"
ZINIT[BIN_DIR]="${ZINIT[HOME_DIR]}/bin"
ZINIT[PLUGINS_DIR]="${ZINIT[HOME_DIR]}/plugins"

basepath="$(cd "$(dirname "$0")/.." && pwd)"
# shellcheck source=lib/core.bash
. "${basepath}/install/lib/core.bash"
# shellcheck source=lib/simple-tui/simple-tui.bash
. "${basepath}/install/lib/simple-tui/simple-tui.bash"
# shellcheck source=lib/errors.bash
. "${basepath}/install/lib/errors.bash"
# shellcheck source=lib/assertions.bash
. "${basepath}/install/lib/assertions.bash"
# shellcheck source=lib/tui.bash
. "${basepath}/install/lib/tui.bash"
# shellcheck source=lib/process.bash
. "${basepath}/install/lib/process.bash"
# shellcheck source=lib/facades/brew.bash
# shellcheck source=lib/facades/gem.bash
# shellcheck source=lib/facades/git.bash
# shellcheck source=lib/facades/go.bash
# shellcheck source=lib/facades/goenv.bash
# shellcheck source=lib/facades/nvm.bash
# shellcheck source=lib/facades/pacman.bash
# shellcheck source=lib/facades/pip.bash
# shellcheck source=lib/facades/pyenv.bash
# shellcheck source=lib/facades/r.bash
# shellcheck source=lib/facades/rbenv.bash
# shellcheck source=lib/facades/rustup.bash
# shellcheck source=lib/facades/stack.bash
# shellcheck source=lib/facades/systemctl.bash
# shellcheck source=lib/facades/trizen.bash
# shellcheck source=lib/facades/yarn.bash
for file in ${basepath}/install/lib/facades/*.bash; do
    . "$file"
done

setup_basic() {
    install_trizen() {
        print_title 'Trizen'
        print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        if ! pacman_query trizen; then
            pacman_sync base-devel git perl

            tmpdir="$(mktemp -d)"

            git_clone https://aur.archlinux.org/trizen.git "$tmpdir"

            (
                cd "$tmpdir"
                makepkg -mis --noconfirm --needed
            )

            rm -r "$tmpdir"
        fi

        mkdir -p "${XDG_CONFIG_HOME}/trizen"
        ln -fs "${HOME}/.dotfiles/trizen/trizen.conf" \
           "${XDG_CONFIG_HOME}/trizen/trizen.conf"

        pause
    }

    install_fstrim() {
        print_title 'TRIM'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        sudo_systemctl_enable fstrim.timer

        pause
    }

    install_ntp() {
        print_title \
            'Network Time Protocol daemon - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon'
        print_desc \
            'Network Time Protocol is the most common method to synchronize the software clock of a GNU/Linux system with internet time servers.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync ntp networkmanager-dispatcher-ntpd

        sudo timedatectl set-timezone Asia/Tokyo

        pause
    }

    install_networkmanager() {
        print_title \
            'Network Manager - https://wiki.archlinux.org/index.php/NetworkManager'
        print_desc \
            'NetworkManager is a program for providing detection and configuration for systems to automatically connect to networks.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync networkmanager

        systemctl_enable NetworkManager.service

        pause
    }

    install_bluetooth() {
        print_title 'Bluetooth - https://wiki.archlinux.org/index.php/Bluetooth'
        print_desc \
            'Bluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync bluez bluez-utils

        systemctl_enable bluetooth.service

        pause
    }

    install_tlp() {
        print_title 'TLP - https://wiki.archlinux.org/index.php/TLP'
        print_desc \
            'TLP brings you the benefits of advanced power management for Linux without the need to understand every technical detail.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync tlp

        systemctl_enable tlp.service
        systemctl_enable tlp-sleep.service
        systemctl_mask systemd-rfkill.service
        systemctl_mask systemd-rfkill.socket

        pause
    }

    install_zsh() {
        print_title 'Zsh - https://wiki.archlinux.org/index.php/Zsh'
        print_desc \
            'Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        if is_macos; then
            brew_install zsh subversion fzf
        elif is_arch; then
            pacman_sync zsh subversion fzf
        else
            unsupported_platform_error
        fi

        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${HOME}/.zshenv"
        mkdir -p "${ZDOTDIR}"
        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${ZDOTDIR}/.zshenv"
        ln -fs "${HOME}/.dotfiles/zsh/zprofile" "${ZDOTDIR}/.zprofile"
        ln -fs "${HOME}/.dotfiles/zsh/zshrc" "${ZDOTDIR}/.zshrc"

        ln -fs "${HOME}/.dotfiles/zsh/aliases.zsh" "${ZDOTDIR}/aliases.zsh"
        ln -fs "${HOME}/.dotfiles/zsh/custom-history.zsh" \
           "${ZDOTDIR}/custom-history.zsh"
        ln -fs "${HOME}/.dotfiles/zsh/secrets.zsh" "${ZDOTDIR}/secrets.zsh"

        ln -fsT "${HOME}/.dotfiles/zsh/functions" "${ZDOTDIR}/functions"
        ln -fsT "${HOME}/.dotfiles/zsh/completions" "${ZDOTDIR}/completions"

        mkdir -p "${ZINIT[HOME_DIR]}"
        git_clone zdharma/zinit "${ZINIT[BIN_DIR]}"

        # Install starship config
        ln -fs "${HOME}/.dotfiles/zsh/starship.toml" \
           "${XDG_CONFIG_HOME}/starship.toml"

        sudo chsh -s "$(command -v zsh)" "$USER"

        pause
    }

    install_tmux() {
        print_title 'tmux - https://wiki.archlinux.org/index.php/Tmux'
        print_desc \
            'tmux is a "terminal multiplexer: it enables a number of terminals (or windows), each running a separate program, to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached."'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        if is_macos; then
            brew_install tmux fzf
        elif is_arch; then
            pacman_sync tmux xsel fzf
        else
            unsupported_platform_error
        fi

        ln -fs "${HOME}/.dotfiles/tmux/tmux.conf" "${HOME}/.tmux.conf"

        mkdir -p "${HOME}/.tmux/scripts"
        ln -fs "${HOME}/.dotfiles/tmux/scripts/clean-orphan-sessions.bash" \
           "${HOME}/.tmux/scripts/clean-orphan-sessions.bash"

        mkdir -p "${HOME}/.tmux/plugins"
        git_clone tmux-plugins/tpm "${HOME}/.tmux/plugins/tpm"
        "${HOME}/.tmux/plugins/tpm/bin/install_plugins"

        mkdir -p "${WORKSPACE_DIR}/sei40kr"
        git_clone sei40kr/tmux-per-project-session \
            "${WORKSPACE_DIR}/sei40kr/tmux-per-project-session"
        ln -fsT "${WORKSPACE_DIR}/sei40kr/tmux-per-project-session" \
           "${HOME}/.tmux/plugins/tmux-per-project-session"

        pause
    }

    install_openssh() {
        print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
        print_desc \
            'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        if is_macos; then
            brew_install openssh
        elif is_arch; then
            pacman_sync openssh
        else
            unsupported_platform_error
        fi

        # TODO Prohibit password authentication

        # shellcheck disable=SC2174
        mkdir -pm 700 "${HOME}/.ssh"
        ln -fs "${HOME}/.dotfiles/ssh/config" "${HOME}/.ssh/config"

        git -C "${HOME}/.dotfiles" remote set-url origin \
            https://github.com/sei40kr/dotfiles.git

        systemctl_enable sshd.service

        pause
    }

    install_xorg() {
        print_title 'Xorg - https://wiki.archlinux.org/index.php/Xorg'
        print_desc \
            'The X.Org project provides an open source implementation of the X Window System.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync dbus xorg xdg-user-dirs xorg-xinit

        ln -fs "${HOME}/.dotfiles/xorg/xprofile" "${HOME}/.xprofile"
        ln -fs "${HOME}/.dotfiles/xorg/xinitrc" "${HOME}/.xinitrc"
        ln -fs "${HOME}/.dotfiles/xorg/Xresources" "${HOME}/.Xresources"
        ln -fs "${HOME}/.dotfiles/xorg/Xmodmap" "${HOME}/.Xmodmap"
        ln -fs "${HOME}/.dotfiles/xorg/xsession" "${HOME}/.xsession"

        LC_ALL=C xdg-user-dirs-update

        pause
    }

    install_fontconfig() {
        print_title \
            'Font configuration - https://wiki.archlinux.org/index.php/Font_configuration'
        print_desc \
            'Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync freetype2 fontconfig noto-fonts noto-fonts-cjk noto-fonts-emoji

        sudo tee /etc/profile.d/freetype2.sh <<EOM >/dev/null
# Subpixel hinting mode can be chosen by setting the right TrueType interpreter
# version. The available settings are:
#
#     truetype:interpreter-version=35  # Classic mode (default in 2.6)
#     truetype:interpreter-version=38  # Infinality mode
#     truetype:interpreter-version=40  # Minimal mode (default in 2.7)
#
# There are more properties that can be set, separated by whitespace. Please
# refer to the FreeType documentation for details.

# Uncomment and configure below
export FREETYPE_PROPERTIES='cff:hinting-engine=adobe truetype:interpreter-version=38'
EOM

        mkdir -p "${XDG_CONFIG_HOME}/fontconfig/conf.d"
        cp -f /etc/fonts/conf.avail/10-hinting-none.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-autohint.conf"
        cp -f /etc/fonts/conf.avail/10-sub-pixel-rgb.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-sub-pixel-rgb.conf"
        cp -f /etc/fonts/conf.avail/11-lcdfilter-default.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/11-lcdfilter-default.conf"
        cp -f /etc/fonts/conf.avail/66-noto-sans.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-sans.conf"
        cp -f /etc/fonts/conf.avail/66-noto-serif.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-serif.conf"
        cp -f /etc/fonts/conf.avail/66-noto-mono.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-mono.conf"
        cp -f /etc/fonts/conf.avail/70-noto-cjk.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/70-noto-cjk.conf"

        pause
    }

    install_trizen
    install_fstrim
    install_ntp
    install_networkmanager
    install_bluetooth
    install_tlp

    install_zsh
    install_tmux
    install_openssh

    install_xorg
    install_fontconfig
}

install_desktop_environment() {
    install_picom() {
        print_title 'Picom - https://wiki.archlinux.org/index.php/Picom'
        print_desc \
            'Picom is a standalone compositor for Xorg, suitable for use with window managers that do not provide compositing.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync picom mesa

        mkdir -p "${XDG_CONFIG_HOME}/picom"
        ln -fs "${HOME}/.dotfiles/picom/picom.conf" \
           "${XDG_CONFIG_HOME}/picom/picom.conf"

        pause
    }

    install_gnome() {
        print_title 'GNOME - https://wiki.archlinux.org/index.php/GNOME'
        print_desc \
            'GNOME is a desktop environment that aims to be simple and easy to use.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync gnome-flashback \
                    gnome-screensaver xautolock \
                    gnome-control-center \
                    gnome-screenshot

        # Background
        trizen_sync chromecast-wallpapers
        mkdir -p "${HOME}/.local/bin"
        ln -fs "${HOME}/.dotfiles/gnome-desktop/wallpaper.sh" \
           "${HOME}/.local/bin/wallpaper.sh"

        # Night Light
        dconf write \
              /org/gnome/settings-daemon/plugins/color/night-light-enabled \
              true
        dconf write \
              /org/gnome/settings-daemon/plugins/color/night-light-automatic \
              false
        dconf write \
              /org/gnome/settings-daemon/plugins/color/night-light-schedule-from \
              0
        dconf write \
              /org/gnome/settings-daemon/plugins/color/night-light-schedule-to \
              23.983333333333277
        dconf write \
              /org/gnome/settings-daemon/plugins/color/night-light-temperature \
              5700

        # Windows
        dconf write /org/gnome/desktop/wm/preferences/button-layout "'appmenu:'"

        pause
    }

    install_xmonad() {
        print_title 'XMonad - https://wiki.archlinux.org/index.php/Xmonad'
        print_desc 'XMonad is a tiling window manager for X.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        stack_install xmonad
        pacman_sync xorg-xmessage

        ln -fsT "${HOME}/.dotfiles/xmonad" "${HOME}/.xmonad"
        : >"${HOME}/.xmonad/xmonad.errors"

        # Xmonad session file for use by gnome-session
        mkdir -p "${XDG_CONFIG_HOME}/gnome-session/sessions"
        cat <<FILE >"${XDG_CONFIG_HOME}/gnome-session/sessions/xmonad.session"
[GNOME Session]
Name=GNOME Flashback (Xmonad)
RequiredComponents=gnome-flashback;xmonad;org.gnome.SettingsDaemon.A11ySettings;org.gnome.SettingsDaemon.Color;org.gnome.SettingsDaemon.Datetime;org.gnome.SettingsDaemon.Housekeeping;org.gnome.SettingsDaemon.Keyboard;org.gnome.SettingsDaemon.MediaKeys;org.gnome.SettingsDaemon.Power;org.gnome.SettingsDaemon.PrintNotifications;org.gnome.SettingsDaemon.Rfkill;org.gnome.SettingsDaemon.ScreensaverProxy;org.gnome.SettingsDaemon.Sharing;org.gnome.SettingsDaemon.Smartcard;org.gnome.SettingsDaemon.Sound;org.gnome.SettingsDaemon.Wacom;org.gnome.SettingsDaemon.XSettings;
FILE
        mkdir -p "${XDG_DATA_HOME}/applications"
        cat <<FILE >"${XDG_DATA_HOME}/applications/xmonad.desktop"
[Desktop Entry]
Type=Application
Encoding=UTF-8
Name=Xmonad
Exec=xmonad
NoDisplay=true
X-GNOME-WMName=Xmonad
X-GNOME-Autostart-Phase=WindowManager
X-GNOME-Provides=windowmanager
X-GNOME-Autostart-Notify=false
FILE

        mkdir -p "$XDG_PICTURES_DIR"

        pause
    }

    install_polybar() {
        print_title 'Polybar - https://wiki.archlinux.org/index.php/Polybar'
        print_desc \
            'polybar is a fast and easy-to-use tool for creating status bars.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        trizen_sync polybar ttf-material-design-icons-webfont
        pip_install system dbus-python

        mkdir -p "${XDG_CONFIG_HOME}/polybar"
        ln -fs "${HOME}/.dotfiles/polybar/config" \
           "${XDG_CONFIG_HOME}/polybar/config"
        ln -fsT "${HOME}/.dotfiles/polybar/scripts" "${HOME}/polybar-scripts"

        pause
    }

    install_rofi() {
        print_title 'Rofi - https://wiki.archlinux.org/index.php/Rofi'
        print_desc \
            'Rofi is a window switcher, run dialog, ssh-launcher and dmenu replacement that started as a clone of simpleswitcher, written by Sean Pringle and later expanded by Dave Davenport.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync rofi

        mkdir -p "${XDG_CONFIG_HOME}/rofi"
        ln -fs "${HOME}/.dotfiles/rofi/config.rasi" \
           "${XDG_CONFIG_HOME}/rofi/config.rasi"
        ln -fs "${HOME}/.dotfiles/rofi/onedark.rasi" \
           "${XDG_CONFIG_HOME}/rofi/onedark.rasi"

        ln -fsT "${XDG_CONFIG_HOME}/rofi/scripts" "${HOME}/rofi-scripts"

        pause
    }

    install_clipmenu() {
        print_title 'clipmenu'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync clipmenu clipnotify

        mkdir -p "${XDG_CONFIG_HOME}/systemd/user"
        cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/clipmenud.service"
[Unit]
Description=Clipmenu daemon

[Service]
ExecStart=/usr/bin/clipmenud
Restart=always
RestartSec=0
Environment=DISPLAY=:0

MemoryDenyWriteExecute=yes
NoNewPrivileges=yes
ProtectControlGroups=yes
ProtectKernelTunables=yes
RestrictAddressFamilies=
RestrictRealtime=yes

[Install]
WantedBy=default.target
EOM

        systemctl_user_enable clipmenud.service

        pause
    }

    install_dunst() {
        print_title 'Dunst - https://wiki.archlinux.org/index.php/Dunst'
        print_desc \
            'Dunst is a lightweight replacement for the notification-daemons provided by most desktop environments.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync dunst

        mkdir -p "${XDG_CONFIG_HOME}/dunst"
        ln -fs "${HOME}/.dotfiles/dunst/dunstrc" \
           "${XDG_CONFIG_HOME}/dunst/dunstrc"

        pause
    }

    install_gtk() {
        print_title 'GTK - https://wiki.archlinux.org/index.php/GTK'
        print_desc \
            'GTK, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync gtk2 gtk3

        mkdir -p "${XDG_CONFIG_HOME}/gtk-3.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-3.0/settings.ini" \
           "${XDG_CONFIG_HOME}/gtk-3.0/settings.ini"
        mkdir -p "${XDG_CONFIG_HOME}/gtk-2.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkrc" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkfilechooser.ini" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkfilechooser.ini"

        # Install Mac key theme
        mkdir -p "${HOME}/.themes/Mac/gtk-3.0" \
              "${HOME}/.themes/Mac/gtk-2.0-key"
        ln -fs "${HOME}/.dotfiles/gtk/themes/Mac/gtk-3.0/gtk-keys.css" \
           "${HOME}/.themes/Mac/gtk-3.0/gtk-keys.css"
        ln -fs "${HOME}/.dotfiles/gtk/themes/Mac/gtk-2.0-key/gtkrc" \
           "${HOME}/.themes/Mac/gtk-2.0-key/gtkrc"

        pause
    }

    install_alacritty() {
        print_title 'Alacritty'
        print_desc 'A cross-platform, GPU-accelerated terminal emulator.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync alacritty

        mkdir -p "${XDG_CONFIG_HOME}/alacritty"
        ln -fs "${HOME}/.dotfiles/alacritty/alacritty.yml" \
           "${XDG_CONFIG_HOME}/alacritty/alacritty.yml"

        pause
    }

    install_thunar() {
        print_title 'Thunar - https://wiki.archlinux.org/index.php/Thunar'
        print_desc \
            'Thunar is a modern file manager for the Xfce Desktop Environment.'

        if ! ask-yesno 'Would you like to install?'; then
            return
        fi

        pacman_sync thunar

        pause
    }

    install_picom

    install_gnome

    install_xmonad
    install_polybar
    install_rofi
    install_clipmenu
    install_dunst

    install_gtk

    install_alacritty
    install_thunar
}

install_accessory_apps() {
    while true; do
        print_title 'Accessory Apps'

        echo "  1) $(menu_item 'Bitwarden')"
        echo "  2) $(menu_item 'Calendar')"
        echo "  3) $(menu_item 'GoldenDict')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_macos; then
                    brew_cask_install bitwarden
                elif is_arch; then
                    trizen_sync bitwarden-bin
                else
                    unsupported_platform_error
                fi
                ;;
            2 )
                if is_arch; then
                    pacman_sync gnome-calendar
                else
                    unsupported_platform_error
                fi
                ;;
            3 )
                if is_arch; then
                    pacman_sync goldendict
                else
                    unsupported_platform_error
                fi
                ;;

            d )
                break
                ;;
        esac
    done
}

install_dev_apps() {
    install_doom_emacs() {
        if is_macos; then
            brew_install \
                d12frosted/emacs-plus --with-emacs-27-branch --with-xwidgets --without-spacemacs-icon \
                libvterm cmake
        elif is_arch; then
            pacman_sync emacs libvterm cmake
        else
            unsupported_platform_error
        fi

        # .emacs.d
        git_clone sei40kr/doom-emacs "${HOME}/.emacs.d"
        "${HOME}/.emacs.d/bin/doom" install

        # .doom.d
        git_clone sei40kr/doom.d "$DOOMDIR"

        # install local packages
        local -a doom_local_packages=(
            competitive-programming-snippets
        )

        mkdir -p "${WORKSPACE_DIR}/sei40kr"
        mkdir -p "${HOME}/.doom.d/packages"
        for package in "${doom_local_packages[@]}"; do
            git_clone "sei40kr/${package}" "${WORKSPACE_DIR}/sei40kr/${package}"
            ln -fsT "${WORKSPACE_DIR}/sei40kr/${package}" \
                "${HOME}/.doom.d/packages/${package}"
        done
    }

    install_intellij_idea_ue() {
        if is_macos; then
            brew_cask_install intellij-idea
        elif is_arch; then
            trizen_sync intellij-idea-ultimate-edition
        else
            unsupported_platform_error
        fi

        git_clone MarcoIeni/intellimacs "${HOME}/.intellimacs"

        ln -fs "${HOME}/.dotfiles/intellij-idea/ideavimrc" "${HOME}/.ideavimrc"
    }

    while true; do
        print_title 'Development Apps'

        echo "  1) $(menu_item 'Git')"
        echo "  2) $(menu_item 'Doom Emacs')"
        echo "  3) $(menu_item 'IntelliJ IDEA Ultimate Edition')"
        echo "  4) $(menu_item 'Zeal')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1)
                if is_macos; then
                    brew_install git
                elif is_arch; then
                    pacman_sync git
                else
                    unsupported_platform_error
                fi

                mkdir -p "${XDG_CONFIG_HOME}/git"
                ln -fs "${HOME}/.dotfiles/git/config" \
                   "${XDG_CONFIG_HOME}/git/config"
                ln -fs "${HOME}/.dotfiles/git/ignore" \
                   "${XDG_CONFIG_HOME}/git/ignore"
                ;;
            2)
                install_doom_emacs
                ;;
            3)
                install_intellij_idea_ue
                ;;
            4)
                if is_arch; then
                    pacman_sync zeal
                else
                    unsupported_platform_error
                fi
                ;;

            d )
                break
                ;;
        esac
    done
}

install_dev_tools() {
    install_c_dev_tools() {
        if is_macos; then
            pacman_sync llvm gcc gdb gdb-dashboard clang
            trizen_sync ccls
        elif is_arch; then
            brew_install llvm gcc gdb clang-format ccls
        else
            unsupported_platform_error
        fi

        pip_install system cpplint cmakelint

        ln -fs "/usr/share/gdb-dashboard/.gdbinit" "${HOME}/.gdbinit"
    }

    install_rust_dev_tools() {
        if is_arch; then
            pacman_sync rustup
        else
            unsupported_platform_error
        fi

        rustup_toolchain_install stable

        rustup_component_add stable rls rust-analysis rust-src
    }

    install_go_dev_tools() {
        if is_macos; then
            brew_install go
        elif is_arch; then
            pacman_sync go
        else
            unsupported_platform_error
        fi

        git_clone syndbg/goenv "$GOENV_ROOT"

        "${GOENV_ROOT}/bin/goenv" global system

        go_get system \
            golang.org/x/tools/gopls@latest \
            golang.org/x/tools/cmd/goimports \
            github.com/motemen/gore/cmd/gore
    }

    install_haskell_dev_tools() {
        stack_install hlint brittany
    }

    install_java_dev_tools() {
        if is_macos; then
            brew_install 'openjdk@11' maven gradle
        elif is_arch; then
            pacman_sync jdk11-openjdk maven gradle
        else
            unsupported_platform_error
        fi
    }

    install_scala_dev_tools() {
        if is_macos; then
            # TODO Install scalafmt
            brew_install \
                scala sbt \
                scalastyle \
                maven gradle
        elif is_arch; then
            pacman_sync \
                scala sbt \
                maven gradle
            trizen_sync \
                scalastyle \
                scalafmt-native \
                metals
        else
            unsupported_platform_error
        fi
    }

    install_python_dev_tools() {
        if is_macos; then
            brew_install python poetry
        elif is_arch; then
            pacman_sync python python-pip poetry
        else
            unsupported_platform_error
        fi

        git_clone pyenv/pyenv "$PYENV_ROOT"
        mkdir -p "${PYENV_ROOT}/plugins"
        git_clone pyenv/pyenv-virtualenv "${PYENV_ROOT}/plugins/pyenv-virtualenv"

        "${PYENV_ROOT}/bin/pyenv" global system

        local -a pip_pkgs=(
            # Jupyter Notebook
            jupyter
            numpy
            pandas
            matplotlib
            # linters
            pylint
            flake8
            # formatters
            black
            # lsp
            'python-language-server[all]'
            jedi
            pyls-mypy
            pyls-isort
            # debugger
            ptvsd
            # editor tools
            importmagic
            epc
            pydoc_utils
        )
        pip_install system "${pip_pkgs[@]}"
    }

    install_ruby_dev_tools() {
        if is_macos; then
            brew_install ruby
        elif is_arch; then
            pacman_sync ruby
        else
            unsupported_platform_error
        fi

        git_clone rbenv/rbenv "$RBENV_ROOT"
        mkdir -p "${RBENV_ROOT}/plugins"
        git_clone rbenv/ruby-build "${RBENV_ROOT}/plugins/ruby-build"

        "${RBENV_ROOT}/bin/rbenv" global system

        local -a gems=(
            rake
            # linters
            rubocop
            # refactoring tools
            rcodetools
            fastri
            # debuggers
            seeing_is_believing
        )
        gem_install system "${gems[@]}"
    }

    install_perl_dev_tools() {
        if is_macos; then
            brew_install perl cpanminus
        elif is_arch; then
            pacman_sync perl cpanminus
        else
            unsupported_platform_error
        fi

        if [[ ! -d "$PERLBREW_ROOT" ]]; then
            pacman_sync perlbrew
            /usr/bin/vendor_perl/perlbrew init 1>/dev/null
        fi

        # TODO install some Perl modules
    }

    install_web_frontend_dev_tools() {
        if is_macos; then
            brew_install node yarn
        elif is_arch; then
            pacman_sync nodejs npm yarn
        else
            unsupported_platform_error
        fi

        git_clone nvm-sh/nvm "$NVM_DIR"
        git -C "$NVM_DIR" checkout "$(git tag --sort=version:refname | tail -n1)"

        ( . "${NVM_DIR}/nvm.sh"
          nvm alias default system )

        local -a yarn_pkgs=(
            # linters
            stylelint-cli
            eslint-cli
            eslint_d
            tslint
            # formatters
            prettier
            prettier-eslint-cli
            typescript-formatter
            # lsp
            vscode-html-languageserver-bin
            vscode-css-languageserver-bin
            javascript-typescript-langserver
            typescript-language-server
            vue-language-server
            # editor tools
            import-js
            # build tools
            typescript
            gulp
            webpack-cli
        )
        yarn_global_add system "${yarn_pkgs[@]}"

        ln -fs "${HOME}/.dotfiles/import-js/importjs.js" "${HOME}/.importjs.js"
    }

    install_sql_dev_tools() {
        pip_install system sqlint sqlparse mycli pgcli litecli

        ln -fs "${HOME}/.dotfiles/mycli/myclirc" "${HOME}/.myclirc"
        ln -fs "${HOME}/.dotfiles/pgcli/pgclirc" "${HOME}/.pgclirc"
    }

    install_r_dev_tools() {
        if is_macos; then
            brew_install r
        elif is_arch; then
            pacman_sync r tk openblas
        else
            unsupported_platform_error
        fi

        ln -fs "${HOME}/.dotfiles/r/Renviron" "${HOME}/.Renviron"
        ln -fs "${HOME}/.dotfiles/r/Renviron" "$R_ENVIRON_USER"
        ln -fs "${HOME}/.dotfiles/r/Rprofile.r" "$R_PROFILE_USER"

        local -a r_libs=(
            # linters
            lintr
            # lsp
            languageserver
        )
        r_install "${r_libs[@]}"
    }

    install_shell_scripts_dev_tools() {
        if is_macos; then
            brew_install shellcheck shfmt
        elif is_arch; then
            pacman_sync shellcheck shfmt
        else
            unsupported_platform_error
        fi

        yarn_global_add system bash-language-server
    }

    install_markdown_dev_tools() {
        gem_install system mdl
        yarn_global_add system markdownlint-cli
        pip_install system grip
    }

    install_plantuml_dev_tools() {
        if is_macos; then
            brew_install plantuml
        elif is_arch; then
            trizen_sync plantuml
        else
            unsupported_platform_error
        fi
    }

    install_ansible_dev_tools() {
        pip_install system ansible ansible-lint
    }

    install_docker_dev_tools() {
        if is_macos; then
            brew_cask_install docker
            brew_install docker-compose
        elif is_arch; then
            pacman_sync docker docker-compose
        else
            unsupported_platform_error
        fi

        yarn_global_add system dockerfile-language-server-nodejs
    }

    install_others() {
        while true; do
            print_title 'Others'

            echo "  1) $(menu_item 'EditorConfig')"
            echo "  2) $(menu_item 'AWS Shell')"
            echo "  3) $(menu_item 'Google Cloud SDK')"
            echo "  4) $(menu_item 'Oracle Cloud Infrastructure CLI')"
            echo "  5) $(menu_item 'act')"
            echo "  6) $(menu_item 'circleci-cli')"
            echo "  7) $(menu_item 'The Travis Client')"
            echo ''
            echo '  d) Done'

            read -rp 'Enter your option: ' opt

            case "$opt" in
                1)
                    if is_macos; then
                        brew_install editorconfig
                    elif is_arch; then
                        pacman_sync editorconfig-core-c
                    else
                        unsupported_platform_error
                    fi
                    ;;
                2)
                    pip_install system aws-shell
                    ;;
                3)
                    if is_macos; then
                        brew_cask_install google-cloud-sdk
                    elif is_arch; then
                        trizen_sync google-cloud-sdk
                    else
                        unsupported_platform_error
                    fi
                    ;;
                4)
                    pip_install system oci-cli
                    ;;
                5)
                    if is_macos; then
                        brew_install nektos/tap/act
                    elif is_arch; then
                        trizen_sync act
                    else
                        unsupported_platform_error
                    fi
                    ;;
                6)
                    if [[ ! -x /usr/local/bin/circleci ]]; then
                        curl -fLSs https://circle.ci/cli | sudo bash
                    fi
                    ;;
                7)
                    gem_install system travis
                    ;;

                d )
                    break
                    ;;
            esac
        done
    }

    install_competitive_programming() {
        # AtCoder environment
        rustup_toolchain_install 1.42.0
        rustup_component_add 1.42.0 rust-src rls
        goenv_install 1.6.0
        pyenv_install 3.4.3
        rbenv_install 2.3.3
        nvm_install v5.12.0

        # LeetCode environment
        rustup_toolchain_install 1.31.0
        rustup_component_add 1.31.0 rust-src rls-preview rust-analysis

        pip_install system atcoder-tools online-judge-tools

        ln -fs "${HOME}/.dotfiles/atcoder-tools/atcodertools.toml" \
           "${HOME}/.atcodertools.toml"
        ln -fs "${HOME}/.dotfiles/atcoder-tools/custom_code_generator.py" \
           "${HOME}/custom_code_generator.py"
        ln -fs "${HOME}/.dotfiles/atcoder-tools/my_template.rs" \
           "${HOME}/my_template.rs"
    }

    while true; do
        print_title 'Development Tools'

        echo "  1) $(menu_item 'C')                 2) $(menu_item 'Rust')"
        echo "  3) $(menu_item 'Go')                4) $(menu_item 'Haskell')"
        echo "  5) $(menu_item 'Java')              6) $(menu_item 'Scala')"
        echo "  7) $(menu_item 'Python')            8) $(menu_item 'Ruby')"
        echo "  9) $(menu_item 'Perl')             10) $(menu_item 'Web Frontend')"
        echo " 11) $(menu_item 'SQL')              12) $(menu_item 'R')"
        echo " 13) $(menu_item 'Shell Scripts')    14) $(menu_item 'Markdown')"
        echo " 15) $(menu_item 'PlantUML')"
        echo ''
        echo " 16) $(menu_item 'Ansible')          17) $(menu_item 'Docker')"
        echo ''
        echo " 18) $(menu_item 'Competitive Programming')"
        echo ''
        echo " 19) $(menu_item 'Others')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                install_c_dev_tools
                ;;
            2 )
                install_rust_dev_tools
                ;;
            3 )
                install_go_dev_tools
                ;;
            4 )
                install_haskell_dev_tools
                ;;
            5 )
                install_java_dev_tools
                ;;
            6 )
                install_scala_dev_tools
                ;;
            7 )
                install_python_dev_tools
                ;;
            8 )
                install_ruby_dev_tools
                ;;
            9 )
                install_perl_dev_tools
                ;;
            10 )
                install_web_frontend_dev_tools
                ;;
            11 )
                install_sql_dev_tools
                ;;
            12 )
                install_r_dev_tools
                ;;
            13 )
                install_shell_scripts_dev_tools
                ;;
            14 )
                install_markdown_dev_tools
                ;;
            15 )
                install_plantuml_dev_tools
                ;;

            16 )
                install_ansible_dev_tools
                ;;
            17 )
                install_docker_dev_tools
                ;;

            18 )
                install_competitive_programming
                ;;

            19 )
                install_others
                ;;

            d )
                break
                ;;
        esac
    done
}

install_office_apps() {
    while true; do
        print_title 'Office Apps'

        echo "  1) $(menu_item 'GNOME Pomodoro')"
        echo "  2) $(menu_item 'TeX Live')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_arch; then
                    trizen_sync gnome-shell-pomodoro
                else
                    unsupported_platform_error
                fi
                ;;
            2 )
                if is_macos; then
                    brew_cask_install basictex
                elif is_arch; then
                    pacman_sync texlive-most texlive-langjapanese
                else
                    unsupported_platform_error
                fi
                ;;

            d )
                break
                ;;
        esac
    done
}

install_system_apps() {
    while true; do
        print_title 'System Apps'

        echo "  1) $(menu_item 'htop')"
        echo "  2) $(menu_item 'strace')"
        echo "  3) $(menu_item 'tcpdump')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_macos; then
                    brew_install htop
                elif is_arch; then
                    pacman_sync htop
                else
                    unsupported_platform_error
                fi
                ;;
            2 )
                if is_arch; then
                    pacman_sync strace
                else
                    unsupported_platform_error
                fi
                ;;
            3 )
                if is_macos; then
                    brew_install tcpdump
                elif is_arch; then
                    pacman_sync tcpdump
                else
                    unsupported_platform_error
                fi
                ;;

            d )
                break
                ;;
        esac
    done
}

install_internet_apps() {
    install_im() {
        while true; do
            print_title 'Instant Messenger Apps'

            echo "  1) $(menu_item 'Skype')"
            echo "  2) $(menu_item 'Slack')"
            echo "  3) $(menu_item 'Discord')"
            echo ''
            echo '  d) Done'

            read -rp 'Enter your option: ' opt

            case "$opt" in
                1 )
                    if is_macos; then
                        brew_cask_install skype
                    elif is_arch; then
                        trizen_sync skypeforlinux-stable-bin
                    else
                        unsupported_platform_error
                    fi
                    ;;
                2 )
                    if is_macos; then
                        brew_cask_install slack
                    elif is_arch; then
                        trizen_sync slack-desktop
                    else
                        unsupported_platform_error
                    fi
                    ;;
                3 )
                    if is_macos; then
                        brew_cask_install discord
                    elif is_arch; then
                        pacman_sync discord
                    else
                        unsupported_platform_error
                    fi
                    ;;

                d )
                    break
                    ;;
            esac
        done
    }

    while true; do
        print_title 'Internet Apps'

        echo "  1) $(menu_item 'Google Chrome')"
        echo "  2) $(menu_item 'Geary')"
        echo ''
        echo "  3) $(menu_item 'Instant Messengers')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_macos; then
                    brew_cask_install google-chrome
                elif is_arch; then
                    trizen_sync google-chrome
                else
                    unsupported_platform_error
                fi
                ;;
            2 )
                if is_arch; then
                    pacman_sync geary
                else
                    unsupported_platform_error
                fi
                ;;

            3 )
                install_im
                ;;

            d )
                break
                ;;
        esac
    done
}

install_fonts() {
    while true; do
        print_title 'Fonts'

        echo "  1) $(menu_item 'Fira Code')"
        echo "  2) $(menu_item 'Input')"
        echo "  3) $(menu_item 'Dejavu')"
        echo "  4) $(menu_item 'Inconsolata-g')"
        echo "  5) $(menu_item 'Source Code Pro')"
        echo "  6) $(menu_item 'Ubuntu Font')"
        echo "  7) $(menu_item 'Anonymous Pro')"
        echo "  8) $(menu_item 'Meslo LG')"
        echo "  9) $(menu_item 'Hack')"
        echo " 10) $(menu_item 'Iosevka')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_macos; then
                    brew_cask_install font-fira-code
                elif is_arch; then
                    pacman_sync otf-fira-code
                else
                    unsupported_platform_error
                fi
                ;;
            2 )
                if is_macos; then
                    brew_cask_install font-input
                elif is_arch; then
                    trizen_sync ttf-input
                else
                    unsupported_platform_error
                fi
                ;;
            3 )
                if is_macos; then
                    brew_cask_install font-dejavu
                elif is_arch; then
                    pacman_sync ttf-dejavu
                else
                    unsupported_platform_error
                fi
                ;;
            4 )
                if is_macos; then
                    brew_cask_install font-inconsolata-g
                elif is_arch; then
                    trizen_sync ttf-inconsolata-g
                else
                    unsupported_platform_error
                fi
                ;;
            5 )
                if is_macos; then
                    brew_cask_install font-source-code-pro
                elif is_arch; then
                    pacman_sync adobe-source-code-pro-fonts
                else
                    unsupported_platform_error
                fi
                ;;
            6 )
                if is_macos; then
                    brew_cask_install font-ubuntu
                elif is_arch; then
                    pacman_sync ttf-ubuntu-font-family
                else
                    unsupported_platform_error
                fi
                ;;
            7 )
                if is_macos; then
                    brew_cask_install font-anonymous-pro
                elif is_arch; then
                    pacman_sync ttf-anonymous-pro
                else
                    unsupported_platform_error
                fi
                ;;
            8 )
                if is_macos; then
                    brew_cask_install font-meslo-lg
                elif is_arch; then
                    trizen_sync ttf-meslo
                else
                    unsupported_platform_error
                fi
                ;;
            9 )
                if is_macos; then
                    brew_cask_install font-hack
                elif is_arch; then
                    pacman_sync ttf-hack
                else
                    unsupported_platform_error
                fi
                ;;
            10 )
                if is_macos; then
                    brew_cask_install font-iosevka
                elif is_arch; then
                    trizen_sync ttf-iosevka
                else
                    unsupported_platform_error
                fi
                ;;

            d )
                break
                ;;
        esac
    done
}

install_i18n_apps() {
    while true; do
        print_title 'Internationalization Apps'

        echo "  1) $(menu_item 'Fcitx')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                if is_arch; then
                    pacman_sync fcitx fcitx-gtk2 fcitx-gtk3 fcitx-qt5 \
                        fcitx-configtool fcitx-mozc
                else
                    unsupported_platform_error
                fi

                mkdir -p "${XDG_CONFIG_HOME}/fcitx/conf"
                ln -fs "${HOME}/.dotfiles/fcitx/config" "${XDG_CONFIG_HOME}/fcitx/config"
                ln -fs "${HOME}/.dotfiles/fcitx/conf/fcitx-classic-ui.conf" \
                   "${XDG_CONFIG_HOME}/fcitx/conf/fcitx-classic-ui.conf"
                ;;

            d )
                break
                ;;
        esac
    done
}

install_extra_apps() {
    while true; do
        print_title 'Extra'

        echo "  1) $(menu_item 'asciinema')"
        echo "  2) $(menu_item 'Pandoc')"
        echo "  3) $(menu_item 'Profile-sync-daemon')"
        echo "  4) $(menu_item 'ranger')"
        echo "  5) $(menu_item 'ripgrep')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pip_install system asciinema
                ;;
            2 )
                if is_macos; then
                    brew_install pandoc
                    brew_cask_install wkhtmltopdf
                elif is_arch; then
                    pacman_sync pandoc wkhtmltopdf
                else
                    unsupported_platform_error
                fi
                ;;
            3 )
                if is_arch; then
                    trizen_sync profile-sync-daemon
                    systemctl_user_enable psd.service
                else
                    unsupported_platform_error
                fi
                ;;
            4 )
                pip_install system ranger-fm

                ln -fs "${HOME}/.dotfiles/ranger/rc.conf" \
                   "${XDG_CONFIG_HOME}/ranger/rc.conf"
                ln -fs "${HOME}/.dotfiles/ranger/commands.py" \
                   "${XDG_CONFIG_HOME}/ranger/commands.py"
                ;;
            5 )
                if is_macos; then
                    brew_install ripgrep
                elif is_arch; then
                    pacman_sync ripgrep
                else
                    unsupported_platform_error
                fi

                ln -fs "${HOME}/.dotfiles/ripgrep/ripgreprc" "${HOME}/.ripgreprc"
                ;;

            d )
                break
                ;;
        esac
    done
}

declare -a visited

main_menu_item() {
    local no="$1"
    local title="$2"

    if [[ "${visited[$no]}" == 1 ]]; then
        printf "%2d) ${GREEN}☑${RESET} ${BOLD}%s${RESET}" "$no" "$title"
    else
        printf "%2d) ☐ ${BOLD}%s${RESET}" "$no" "$title"
    fi
}

while true; do
    print_title 'dotfiles - https://github.com/sei40kr/dotfiles'

    echo " $(main_menu_item  1 'Basic Setup')                  $(main_menu_item  2 'Desktop Environment')"
    echo " $(main_menu_item  3 'Accessory Apps')               $(main_menu_item  4 'Development Apps')"
    echo " $(main_menu_item  5 'Development Tools')            $(main_menu_item  6 'Office Apps')"
    echo " $(main_menu_item  7 'System Apps')                  $(main_menu_item  8 'Internet Apps')"
    echo " $(main_menu_item  9 'Fonts')                        $(main_menu_item 10 'Internationalization Apps')"
    echo " $(main_menu_item 11 'Extra')"
    echo ''
    echo '  q) Quit'

    read -rp 'Enter your option: ' opt

    case "$opt" in
        1 )
            setup_basic
            visited[1]=1
            ;;
        2 )
            tui-print-warning 'You must run the Basic Setup at first'

            if ask-yesno 'Are you sure to continue?'; then
                install_desktop_environment
            fi

            visited[2]=1
            ;;
        3 )
            install_accessory_apps
            visited[3]=1
            ;;
        4 )
            install_dev_apps
            visited[4]=1
            ;;
        5 )
            install_dev_tools
            visited[5]=1
            ;;
        6 )
            install_office_apps
            visited[6]=1
            ;;
        7 )
            install_system_apps
            visited[7]=1
            ;;
        8 )
            install_internet_apps
            visited[9]=1
            ;;
        9 )
            install_fonts
            visited[12]=1
            ;;
        10 )
            install_i18n_apps
            visited[13]=1
            ;;
        11 )
            install_extra_apps
            visited[14]=1
            ;;

        q )
            break
            ;;
    esac
done
