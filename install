#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

IFS=$'\n\t'

: ${XDG_CONFIG_HOME:=${HOME}/.config}
: ${XDG_DATA_HOME:=${HOME}/.local/share}

: ${XDG_PICTURES_DIR:=${HOME}/Pictures}

: ${ZDOTDIR:=${HOME}/.zsh}

: ${NVM_DIR:=${HOME}/.nvm}
: ${GOENV_ROOT:=${HOME}/.goenv}
: ${PYENV_ROOT:=${HOME}/.pyenv}
: ${RBENV_ROOT:=${HOME}/.rbenv}

declare -A ZPLGM
ZPLGM[HOME_DIR]="${HOME}/.zplugin"
ZPLGM[BIN_DIR]="${ZPLGM[HOME_DIR]}/bin"
ZPLGM[PLUGINS_DIR]="${ZPLGM[HOME_DIR]}/plugins"

basepath="$(dirname "$(realpath "$0")")"
# shellcheck source=install_helpers.bash
. "${basepath}/install_helpers.bash"

install_fstrim() {
    print_title 'TRIM'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    sudo_systemctl_enable fstrim.timer

    pause
}

install_trizen() {
    print_title 'Trizen'
    print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    if ! pacman_query trizen; then
        pacman_sync base-devel git perl

        tmp_dir="$(mktemp -d '/tmp/trizen-XXXXXXXXXX')"
        git clone https://aur.archlinux.org/trizen.git "$tmp_dir"
        ( cd "$tmp_dir"; makepkg -mis --noconfirm --needed )
    fi

    pause
}

install_tmux() {
    print_title 'tmux - https://wiki.archlinux.org/index.php/Tmux'
    print_desc \
        'tmux is a "terminal multiplexer: it enables a number of terminals (or windows), each running a separate program, to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached."'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync tmux xsel

    ln -fs "${HOME}/tmux/tmux.conf" "${HOME}/.tmux.conf"

    if [[ ! -d "${HOME}/.tmux/plugins/tpm" ]]; then
        mkdir -p "${HOME}/.tmux/plugins"
        git clone https://github.com/tmux-plugins/tpm.git \
            "${HOME}/.tmux/plugins/tpm"

        "${HOME}/.tmux/plugins/tpm/bin/install_plugins"
    fi

    pause
}

install_compton() {
    print_title 'Compton - https://wiki.archlinux.org/index.php/Compton'
    print_desc \
        'Compton is a standalone compositor for Xorg, suitable for use with window managers that do not provide compositing.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync compton

    ln -fs "${HOME}/.dotfiles/compton/compton.conf" \
       "${XDG_CONFIG_HOME}/compton/compton.conf"

    pause
}

install_redshift() {
    print_title 'Redshift - https://wiki.archlinux.org/index.php/Redshift'
    print_desc \
        'Redshift adjusts the color temperature of your screen according to your surroundings.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync redshift

    mkdir -p "${XDG_CONFIG_HOME}/redshift/hooks"
    ln -fs "${HOME}/.dotfiles/redshift/hooks/brightness.sh" \
       "${XDG_CONFIG_HOME}/redshift/hooks/brightness.sh"

    pause
}

install_feh() {
    print_title 'Feh - https://wiki.archlinux.org/index.php/Feh'
    print_desc \
        'feh is a lightweight and powerful image viewer that can also be used to manage the desktop wallpaper for standalone window managers lacking such features.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync feh

    mkdir -p "${XDG_DATA_HOME}/backgrounds"
    ln -fs "${HOME}/.dotfiles/feh/fehbg" "${HOME}/.fehbg"

    pause
}

install_rofi() {
    print_title 'Rofi - https://wiki.archlinux.org/index.php/Rofi'
    print_desc \
        'Rofi is a window switcher, run dialog, ssh-launcher and dmenu replacement that started as a clone of simpleswitcher, written by Sean Pringle and later expanded by Dave Davenport.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync rofi

    mkdir -p "${XDG_CONFIG_HOME}/rofi"
    ln -fs "${HOME}/.dotfiles/rofi/config" "${XDG_CONFIG_HOME}/rofi/config"

    mkdir -p "${HOME}/.local/bin"
    ln -fs "${XDG_CONFIG_HOME}/rofi/bin/rofi-extra-menu" \
       "${HOME}/.local/bin/rofi-extra-menu"

    pause
}

install_dunst() {
    print_title 'Dunst - https://wiki.archlinux.org/index.php/Dunst'
    print_desc \
        'Dunst is a lightweight replacement for the notification-daemons provided by most desktop environments.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync dunst

    mkdir -p "${XDG_CONFIG_HOME}/dunst"
    ln -fs "${HOME}/.dotfiles/dunst/dunstrc" "${XDG_CONFIG_HOME}/dunst/dunstrc"

    pause
}

install_clipmenu() {
    print_title 'Clipmenu'
    print_desc \
        'clipmenu is a simple clipboard manager using dmenu (or rofi) and xsel.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync clipmenu clipnotify

    mkdir -p "${XDG_CONFIG_HOME}/systemd/user"
    cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/clipmenud.service"
[Unit]
Description=Clipmenu daemon

[Service]
ExecStart=/usr/bin/clipmenud
Restart=always
RestartSec=0
Environment=DISPLAY=:0

MemoryDenyWriteExecute=yes
NoNewPrivileges=yes
ProtectControlGroups=yes
ProtectKernelTunables=yes
RestrictAddressFamilies=
RestrictRealtime=yes

[Install]
WantedBy=default.target
EOM

    systemctl_user_enable clipmenud.service

    pause
}

setup_basic() {
    install_ntp() {
        print_title \
            'Network Time Protocol daemon - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon'
        print_desc \
            'Network Time Protocol is the most common method to synchronize the software clock of a GNU/Linux system with internet time servers.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync ntp networkmanager-dispatcher-ntpd

        sudo timedatectl set-timezone Asia/Tokyo

        pause
    }

    install_zsh() {
        print_title 'Zsh - https://wiki.archlinux.org/index.php/Zsh'
        print_desc \
            'Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync zsh subversion

        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${HOME}/.zshenv"
        mkdir -p "${ZDOTDIR}"
        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${ZDOTDIR}/.zshenv"
        ln -fs "${HOME}/.dotfiles/zsh/zprofile" "${ZDOTDIR}/.zprofile"
        ln -fs "${HOME}/.dotfiles/zsh/zshrc" "${ZDOTDIR}/.zshrc"

        ln -fs "${HOME}/.dotfiles/zsh/alias_defs.zsh" "${ZDOTDIR}/alias_defs.zsh"

        mkdir -p "${ZDOTDIR}/functions"
        ln -fs "${HOME}/.dotfiles/zsh/functions/clone_gh" \
        "${ZDOTDIR}/functions/clone_gh"
        ln -fs "${HOME}/.dotfiles/zsh/functions/create_gh" \
        "${ZDOTDIR}/functions/create_gh"
        ln -fs "${HOME}/.dotfiles/zsh/functions/kca" "${ZDOTDIR}/functions/kca"
        ln -fs "${HOME}/.dotfiles/zsh/functions/kres" "${ZDOTDIR}/functions/kres"
        ln -fs "${HOME}/.dotfiles/zsh/functions/pyclean" \
        "${ZDOTDIR}/functions/pyclean"
        ln -fs "${HOME}/.dotfiles/zsh/functions/ranger-cd" \
        "${ZDOTDIR}/functions/ranger-cd"

        mkdir -p "${ZDOTDIR}/completions"
        ln -fs "${HOME}/.dotfiles/zsh/completions/_atcoder-tools" \
        "${ZDOTDIR}/completions/_atcoder-tools"
        ln -fs "${HOME}/.dotfiles/zsh/completions/_kubectl" \
        "${ZDOTDIR}/completions/_kubectl"
        ln -fs "${HOME}/.dotfiles/zsh/completions/_rustup" \
        "${ZDOTDIR}/completions/_rustup"

        if [[ ! -d "${ZPLGM[BIN_DIR]}" ]]; then
            mkdir -p "${ZPLGM[HOME_DIR]}"
            git clone https://github.com/zdharma/zplugin.git "${ZPLGM[BIN_DIR]}"
        fi

        mkdir -p "${ZPLGM[PLUGINS_DIR]}"
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-docker" ]]; then
            git clone https://github.com/sei40kr/zsh-fzf-docker.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-docker"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-gcloud" ]]; then
            git clone https://github.com/sei40kr/zsh-fzf-gcloud.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-gcloud"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-kubernetes" ]]; then
            git clone https://github.com/sei40kr/zsh-fzf-kubernetes.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-kubernetes"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-projects" ]]; then
            git clone https://github.com/sei40kr/zsh-fzf-projects.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-projects"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fast-alias-tips" ]]; then
            git clone https://github.com/sei40kr/zsh-fast-alias-tips.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fast-alias-tips"
        fi

        ln -fs "${HOME}/.dotfiles/zsh/starship.toml" \
        "${XDG_CONFIG_HOME}/starship.toml"

        sudo chsh -s "$(command -v zsh)" "$USER"

        pause
    }

    install_openssh() {
        print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
        print_desc \
            'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync openssh

        # TODO Prohibit password authentication

        systemctl_enable sshd.service

        pause
    }

    install_bluetooth() {
        print_title 'Bluetooth - https://wiki.archlinux.org/index.php/Bluetooth'
        print_desc \
            'Bluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync bluez bluez-utils

        systemctl_enable bluetooth.service

        pause
    }

    install_networkmanager() {
        print_title \
            'Network Manager - https://wiki.archlinux.org/index.php/NetworkManager'
        print_desc \
            'NetworkManager is a program for providing detection and configuration for systems to automatically connect to networks.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync networkmanager dnsmasq dialog

        cat <<EOM | sudo tee /etc/NetworkManager/conf.d/dns.conf 2>/dev/null
[main]
dns=dnsmasq
EOM

        sudo mkdir -p /etc/NetworkManager/dnsmasq.d
        cat <<EOM | sudo tee /etc/NetworkManager/dnsmasq.d/cache.conf 2>/dev/null
cache-size=1024
EOM

        systemctl_enable NetworkManager.service

        pause
    }

    install_xorg() {
        print_title 'Xorg - https://wiki.archlinux.org/index.php/Xorg'
        print_desc \
            'The X.Org project provides an open source implementation of the X Window System.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync dbus xorg xorg-xinit xautolock xsecurelock

        ln -fs "${HOME}/.dotfiles/xorg/xinitrc" "${HOME}/.xinitrc"
        ln -fs "${HOME}/.dotfiles/xorg/Xresources" "${HOME}/.Xresources"
        ln -fs "${HOME}/.dotfiles/xorg/Xmodmap" "${HOME}/.Xmodmap"
        ln -fs "${HOME}/.dotfiles/xorg/xsession" "${HOME}/.xsession"

        pause
    }

    install_fontconfig() {
        print_title \
            'Font configuration - https://wiki.archlinux.org/index.php/Font_configuration'
        print_desc \
            'Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync fontconfig freetype2 noto-fonts noto-fonts-cjk noto-fonts-emoji

        mkdir -p "${XDG_CONFIG_HOME}/fontconfig/conf.d"
        cp -f /etc/fonts/conf.avail/10-hinting-none.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-hinting-none.conf"
        cp -f /etc/fonts/conf.avail/10-sub-pixel-rgb.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-sub-pixel-rgb.conf"
        cp -f /etc/fonts/conf.avail/11-lcdfilter-default.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/11-lcdfilter-default.conf"
        cp -f /etc/fonts/conf.avail/66-noto-sans.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-sans.conf"
        cp -f /etc/fonts/conf.avail/66-noto-serif.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-serif.conf"
        cp -f /etc/fonts/conf.avail/66-noto-mono.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-mono.conf"
        cp -f /etc/fonts/conf.avail/70-noto-cjk.conf \
        "${XDG_CONFIG_HOME}/fontconfig/conf.d/70-noto-cjk.conf"

        pause
    }

    install_ntp
    install_bluetooth
    install_networkmanager

    install_zsh
    install_openssh

    install_xorg
    install_fontconfig
}

install_desktop_environment() {
    install_xmonad() {
        print_title 'XMonad - https://wiki.archlinux.org/index.php/Xmonad'
        print_desc 'XMonad is a tiling window manager for X.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        stack_install xmonad
        pacman_sync xorg-xmessage scrot xmobar alsa-mixer awk conky dzen2

        ln -fsT "${HOME}/.dotfiles/xmonad" "${HOME}/.xmonad"
        : >"${HOME}/.xmonad/xmonad.errors"

        mkdir -p "$XDG_PICTURES_DIR"

        ln -fs "${HOME}/.dotfiles/xmobar/xmobarrc" "${HOME}/.xmobarrc"
        mkdir -p "${HOME}/.local/bin"
        ln -fs "${HOME}/.dotfiles/xmobar/bin/xmobar-alsa-volume" \
           "${HOME}/.local/bin/xmobar-alsa-volume"
        ln -fs "${HOME}/.dotfiles/xmobar/bin/xmobar-fcitx-state" \
           "${HOME}/.local/bin/xmobar-fcitx-state"

        mkdir -p "${XDG_CONFIG_HOME}/conky"
        ln -fs "${HOME}/.dotfiles/conky/conky.conf" \
           "${XDG_CONFIG_HOME}/conky/conky.conf"
        ln -fs "${HOME}/.dotfiles/conky/conky_helpers.lua" \
           "${XDG_CONFIG_HOME}/conky/conky_helpers.lua"

        ln -fs "${HOME}/.dotfiles/dzen2/dzconky" "${HOME}/.local/bin/dzconky"

        pause
    }

    install_gtk() {
        print_title 'GTK - https://wiki.archlinux.org/index.php/GTK'
        print_desc \
            'GTK, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync gtk2 gtk3

        mkdir -p "${XDG_CONFIG_HOME}/gtk-3.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-3.0/settings.ini" \
           "${XDG_CONFIG_HOME}/gtk-3.0/settings.ini"
        mkdir -p "${XDG_CONFIG_HOME}/gtk-2.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkrc" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkfilechooser.ini" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkfilechooser.ini"

        pause
    }

    install_xmonad
    install_gtk
}

install_alacritty() {
    print_title 'Alacritty'
    print_desc 'A cross-platform, GPU-accelerated terminal emulator.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync alacritty

    mkdir -p "${XDG_CONFIG_HOME}/alacritty"
    ln -fs "${HOME}/.dotfiles/alacritty/alacritty.yml" \
       "${XDG_CONFIG_HOME}/alacritty/alacritty.yml"

    pause
}

install_fcitx() {
    print_title 'Fcitx - https://wiki.archlinux.org/index.php/Fcitx'
    print_desc \
        'Fcitx is a lightweight input method framework aimed at providing environment independent language support for Linux.'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync fcitx fcitx-gtk2 fcitx-gtk3 fcitx-qt5 \
                fcitx-configtool fcitx-mozc

    mkdir -p "${XDG_CONFIG_HOME}/fcitx/conf"
    ln -fs "${HOME}/.dotfiles/fcitx/config" "${XDG_CONFIG_HOME}/fcitx/config"
    ln -fs "${HOME}/.dotfiles/fcitx/conf/fcitx-classic-ui.conf" \
       "${XDG_CONFIG_HOME}/fcitx/conf/fcitx-classic-ui.conf"

    pause
}

install_google_chrome() {
    print_title \
        'Google Chrome - https://aur.archlinux.org/packages/google-chrome'
    print_desc 'The popular and trusted web browser by Google'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    trizen_sync google-chrome

    pause
}

install_profile_sync_daemon() {
    print_title \
        'Profile-sync-daemon - https://wiki.archlinux.org/index.php/Profile-sync-daemon'
    print_desc \
        'Profile-sync-daemon (psd) is a tiny pseudo-daemon designed to manage browser profile(s) in tmpfs and to periodically sync back to the physical disc (HDD/SSD).'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    trizen_sync profile-sync-daemon

    systemctl_user_enable psd.service

    pause
}

install_misc_guiapps() {
    print_title 'Misc GUI Apps'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    cat <<EOM
 1) bitwarden
 2) thunar
 3) ristretto
 4) parole

 q) Quit

EOM

    while true; do
        read -rp 'Enter your option: ' opt

        case "$opt" in
            1)
                trizen_sync bitwarden-bin
                ;;
            2)
                pacman_sync thunar gvfs
                ;;
            3)
                pacman_sync ristretto tumbler
                ;;
            4)
                pacman_sync parole ffmpegthumbnailer
                ;;

            q)
                break
                ;;
        esac
    done

    pause
}

install_misc_cliapps() {
    print_title 'Misc CLI Applications'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync ripgrep pandoc wkhtmltopdf

    ln -fs "${HOME}/.dotfiles/ripgrep/ripgreprc" "${HOME}/.ripgreprc"

    pause
}

install_devapps() {
    install_spacemacs() {
        pacman_sync emacs cmake libvterm fbida

        if [[ ! -d "${HOME}/.emacs.d" ]]; then
            git clone -b develop git@github.com:sei40kr/spacemacs.git \
                "${HOME}/.emacs.d"

            mkdir -p "${HOME}/.emacs.d/private/layers"
        fi

        mkdir -p "${HOME}/.emacs.d/private/local"
        if [[ ! -d "${HOME}/.emacs.d/private/local/competitive-programming-snippets" ]]
        then
            git clone \
                ssh://git@github.com/sei40kr/competitive-programming-snippets.git \
                "${HOME}/.emacs.d/private/local/competitive-programming-snippets"
        fi
        if [[ ! -d "${HOME}/.emacs.d/private/local/jest-snippets" ]]; then
            git clone ssh://git@github.com/sei40kr/jest-snippets.git \
                "${HOME}/.emacs.d/private/local/jest-snippets"
        fi
        if [[ ! -d "${HOME}/.emacs.d/private/local/rails-snippets" ]]; then
            git clone ssh://git@github.com/sei40kr/rails-snippets.git \
                "${HOME}/.emacs.d/private/local/rails-snippets"
        fi
        if [[ ! -d "${HOME}/.emacs.d/private/local/react-snippets" ]]; then
            git clone ssh://git@github.com/sei40kr/react-snippets.git \
                "${HOME}/.emacs.d/private/local/react-snippets"
        fi
        if [[ ! -d "${HOME}/.emacs.d/private/local/redux-snippets" ]]; then
            git clone ssh://git@github.com/sei40kr/redux-snippets.git \
                "${HOME}/.emacs.d/private/local/redux-snippets"
        fi
    }

    install_intellij_idea_ue() {
        trizen_sync intellij-idea-ultimate-edition

        if [[ ! -d "${HOME}/intelli-space" ]]; then
            git clone https://github.com/MarcoIeni/intelli-space.git \
                "${HOME}/intelli-space"
        fi

        ln -fs "${HOME}/.dotfiles/intellij-idea/ideavimrc" "${HOME}/.ideavimrc"
    }

    print_title 'Development Apps'

    cat <<EOM
 1) Vim
 2) Git
 3) Spacemacs
 4) Visual Studio Code
 5) IntelliJ IDEA Ultimate Edition
 6) Zeal

 q) Quit

EOM

    while true; do
        read -rp 'Enter your option: ' opt

        case "$opt" in
            1)
                pacman_sync vim

                ln -fs "${HOME}/.dotfiles/vim/vimrc" "${HOME}/.vimrc"
                ;;
            2)
                pacman_sync git

                ln -fs "${HOME}/.dotfiles/git/gitconfig" \
                   "${XDG_CONFIG_HOME}/git/config"
                ln -fs "${HOME}/.dotfiles/git/gitignore" \
                   "${XDG_CONFIG_HOME}/git/ignore"
                ;;
            3)
                install_spacemacs
                ;;
            4)
                pacman_sync code
                ;;
            5)
                install_intellij_idea_ue
                ;;
            6)
                pacman_sync zeal
                ;;

            q)
                break
                ;;
        esac
    done

    pause
}

install_c_devtools() {
    pacman_sync llvm clang

    # TODO Install cpplint
    # TODO Install cmakelint

    trizen_sync cquery
}

install_rust_devtools() {
    rustup_toolchain_install stable

    rustup_component_add stable rls rust-analysis rust-src
}

install_go_devtools() {
    local go_version

    if [[ ! -d "${GOENV_ROOT}" ]]; then
        git clone -q https://github.com/syndbg/goenv.git "$GOENV_ROOT"
    fi

    go_version="$("${GOENV_ROOT}/bin/goenv" install -l |
                  grep -ve 'beta' -ve 'rc' |
                  tail -n1)"
    go_version="${go_version// /}"
    "${GOENV_ROOT}/bin/goenv" install -s "$go_version"
    "${GOENV_ROOT}/bin/goenv" global "$go_version"

    local GOPATH
    GOPATH="${HOME}/go/${go_version}"

    if [[ ! -x "${GOPATH}/bin/dep" ]]; then
        mkdir -p "${GOPATH}/bin"

        GOPATH="$GOPATH" \
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
    fi

    go_pkgs=(
        # editor tools
        # cf https://github.com/syl20bnr/spacemacs/blob/develop/layers/+lang/go/README.org#pre-requisites
        golang.org/x/tools/cmd/godoc
        golang.org/x/tools/cmd/goimports
        golang.org/x/tools/cmd/gorename
        golang.org/x/tools/cmd/guru
        github.com/cweill/gotests/...
        github.com/davidrjenni/reftools/cmd/fillstruct
        github.com/fatih/gomodifytags
        github.com/godoctor/godoctor
        github.com/haya14busa/gopkgs/cmd/gopkgs
        github.com/josharian/impl
        github.com/mdempsky/gocode
        github.com/rogpeppe/godef
        github.com/zmb3/gogetdoc
        # linters
        golang.org/x/lint/golint
        github.com/kisielk/errcheck
        github.com/mdempsky/unconvert
    )
    go_get "${go_pkgs[@]}"
}

install_haskell_devtools() {
    stack_install hlint \
                  hindent \
                  stylish-haskell \
                  apply-refact \
                  hasktags \
                  hoogle
}

install_python_devtools() {
    local python3_stable_version
    local python2_stable_version

    if [[ ! -d "${PYENV_ROOT}" ]]; then
        git clone -q https://github.com/pyenv/pyenv.git "$PYENV_ROOT"
    fi

    python3_stable_version="$("${PYENV_ROOT}/bin/pyenv" install -l |
                              grep -Poe '(?<=\s)3(?:\.\d+){2}$' |
                              tail -n1)"
    python2_stable_version="$("${PYENV_ROOT}/bin/pyenv" install -l |
                              grep -Poe '(?<=\s)2(?:\.\d+){2}$' |
                              tail -n1)"
    "${PYENV_ROOT}/bin/pyenv" install -s "$python3_stable_version"
    "${PYENV_ROOT}/bin/pyenv" install -s "$python2_stable_version"
    "${PYENV_ROOT}/bin/pyenv" global "$python3_stable_version" \
                              "$python2_stable_version"

    # TODO Install poetry

    local -a pkgs
    pkgs=(
        pip
        # Jupyter Notebook
        jupyter
        numpy
        pandas
        matplotlib
        # linters
        pylint
        # formatters
        flake8
        # lsp
        python-language-server[all]
        jedi
        pyls-mypy
        pyls-isort
        # debugger
        ptvsd
        # editor tools
        importmagic
        epc
        pydoc_utils
    )
    pip3_install "${pkgs[@]}"

    mkdir -p "${XDG_CONFIG_HOME}/matplotlib"
    ln -fs "${HOME}/.dotfiles/matplotlib/matplotlibrc" \
       "${XDG_CONFIG_HOME}/matplotlib/matplotlibrc"
}

install_ruby_devtools() {
    local ruby_stable_version

    if [[ ! -d "$RBENV_ROOT" ]]; then
        git clone -q https://github.com/rbenv/rbenv.git "$RBENV_ROOT"
    fi
    if [[ ! -d "${RBENV_ROOT}/plugins/ruby-build" ]]; then
        mkdir -p "${RBENV_ROOT}/plugins"
        git clone -q https://github.com/rbenv/ruby-build.git "${RBENV_ROOT}/plugins/ruby-build"
    fi

    ruby_stable_version="$("${RBENV_ROOT}/bin/rbenv" install -l |
                           grep -Poe '(?<=\s)\d+(?:\.\d+){2}$' |
                           tail -n1)"
    "${RBENV_ROOT}/bin/rbenv" install -s "$ruby_stable_version"
    "${RBENV_ROOT}/bin/rbenv" global "$ruby_stable_version"

    local -a gems
    gems=(
        rake
        pry
        pry-coolline
        pry-doc
        # linters
        rubocop
        # refactoring tools
        rcodetools
        fastri
        # debuggers
        seeing_is_believing
        # lsp
        solargraph
    )
    gem_install "${gems[@]}"
    ln -fs "${HOME}/.dotfiles/pry/pryrc" "${HOME}/.pryrc"
}

install_web_frontend_devtools() {
    if [[ ! -f "${NVM_DIR}/nvm.sh" ]]; then
        git clone https://github.com/nvm-sh/nvm.git "$NVM_DIR"
    fi

    NVM_DIR="$NVM_DIR" \
           NVM_SYMLINK_CURRENT=true \
           bash -c '. "${NVM_DIR}/nvm.sh"; export NVM_SYMLINK_CURRENT; nvm install --latest-npm --no-progress stable'

    # TODO Install yarn

    yarn_global_add stylelint-cli \
                    eslint-cli \
                    import-js \
                    prettier \
                    prettier-eslint-cli \
                    javascript-typescript-langserver \
                    tslint \
                    typescript \
                    typescript-formatter \
                    typescript-language-server

    ln -fs "${HOME}/.dotfiles/import-js/.importjs.js"
}

install_r_devtools() {
    pacman_sync r openblas
}

install_devtools() {
    print_title 'Development Tools'

    if ! read_yn 'Would you like to install?'; then
        return
    fi

    cat <<EOM
 1) C
 2) Rust
 3) Go
 4) Haskell
 5) Python
 6) Ruby
 7) Web Frontend
 8) R

 q) Quit

EOM

    while true; do
        read -rp 'Enter your option: ' opt

        case "$opt" in
            1)
                install_c_devtools
                ;;
            2)
                install_rust_devtools
                ;;
            3)
                install_go_devtools
                ;;
            4)
                install_haskell_devtools
                ;;
            5)
                install_python_devtools
                ;;
            6)
                install_ruby_devtools
                ;;
            7)
                install_web_frontend_devtools
                ;;
            8)
                install_r_devtools
                ;;

            q)
                break
                ;;
        esac
    done

    pause
}

install_fstrim
install_trizen
install_tmux

setup_basic
install_desktop_environment
install_compton
install_redshift
install_feh
install_rofi
install_dunst
install_clipmenu
install_alacritty
install_fcitx
install_google_chrome
install_profile_sync_daemon
install_misc_guiapps
install_misc_cliapps

install_devapps
install_devtools
