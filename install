#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

IFS=$'\n\t'

COLUMNS="$(tput cols)"

BOLD="$(tput bold)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
PURPLE="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
RESET="$(tput sgr0)"

: ${XDG_CONFIG_HOME:=${HOME}/.config}

print_line() {
    local empty_line
    empty_line="$(printf "%${COLUMNS}s")"

    echo "${empty_line// /-}"
}

print_title() {
    local title
    title="$1"

    clear
    print_line
    echo "# ${BOLD}${title}${RESET}"
    print_line
    echo ''
}

print_desc() {
    local desc
    desc="$1"

    echo "$desc"
    echo ''
}

ask_yn() {
    local prompt
    local answer
    prompt="$1"

    read -n1 -rp "${prompt} [yn]: " answer
    echo ''
    echo ''

    if [[ "$answer" == [yY] ]]; then
        return 0
    fi

    return 1
}

print_info() {
    local message
    message="$1"

    echo "${message}"
}

print_warning() {
    local message
    message="$1"

    echo -e "${YELLOW}${message}${RESET}"
}

print_danger() {
    local message
    message="$1"

    echo -e "${RED}${message}${RESET}"
}

error() {
    local message
    local status_code
    message="$1"
    status_code="$2"

    echo "$message" >&2
    exit "${status_code:-1}"
}

pause() {
    print_line
    read -sn 1 -p 'Press enter to continue ...'
}

pacman_query() {
    local -a pkgs
    pkgs=( "$@" )

    pacman -Q "${pkgs[@]}" &>/dev/null
}

pacman_sync() {
    local -a pkgs
    pkgs=( "$@" )
    sudo pacman -Spy --print-format '%r' "${pkgs[@]}" | read -ra repos

    echo 'Installing'

    for pkg in "${pkgs[@]}"; do
        echo "- ${pkg}"
    done

    sudo pacman -Sy --needed --noconfirm --noprogressbar "${pkgs[@]}"
}

trizen_sync() {
    local -a pkgs
    pkgs=( "$@" )

    if ! pacman_query trizen; then
        error 'trizen is not installed. Aborting.'
    fi

    echo 'Installing'

    for pkg in "${pkgs[@]}"; do
        echo "- ${pkg}"
    done

    trizen -Sy --needed --noconfirm --noprogressbar --nopull "${pkgs[@]}"
}

stack_install() {
    local -a pkgs
    pkgs=( "$@")

    if ! pacman_query stack; then
        error 'stack is not installed. Aborting.'
    fi

    echo 'Installing'
    printf "%s\n" "${pkgs[@]}"

    stack install "${pkgs[@]}"
}

systemctl_enable() {
    local service
    service="$1"

    sudo systemctl enable --now "$service"
}

systemctl_user_enable() {
    local service
    service="$1"

    systemctl --user enable --now "$service"
}

install_trizen() {
    print_title 'Trizen'
    print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    if ! pacman_query trizen; then
        pacman_sync base-devel git perl

        tmp_dir="$(mktemp -d '/tmp/trizen-XXXXXXXXXX')"
        git clone https://aur.archlinux.org/trizen.git "$tmp_dir"
        ( cd "$tmp_dir"; makepkg -mis --noconfirm --needed )
    fi

    pause
}

install_openssh() {
    print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
    print_desc \
        'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync openssh

    # TODO Prohibit password authentication

    systemctl_enable sshd.service

    pause
}

install_xorg() {
    print_title 'Xorg - https://wiki.archlinux.org/index.php/Xorg'
    print_desc \
        'The X.Org project provides an open source implementation of the X Window System.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync dbus xorg xorg-xinit

    ln -fs "${HOME}/.dotfiles/xorg/xinitrc" "${HOME}/.xinitrc"
    ln -fs "${HOME}/.dotfiles/xorg/xsession" "${HOME}/.xsession"

    pause
}

install_compton() {
    print_title 'Compton - https://wiki.archlinux.org/index.php/Compton'
    print_desc \
        'Compton is a standalone compositor for Xorg, suitable for use with window managers that do not provide compositing.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    pacman_sync compton

    ln -fs "${HOME}/.dotfiles/compton/compton.conf" \
       "${XDG_CONFIG_HOME}/compton/compton.conf"

    pause
}

install_xmonad() {
    print_title 'xmonad - https://wiki.archlinux.org/index.php/Xmonad'
    print_desc 'xmonad is a tiling window manager for X.'

    if ! ask_yn 'Would you like to install?'; then
        return
    fi

    stack_install xmonad
    pacman_sync xorg-xmessage

    ln -fs "${HOME}/.dotfiles/xmonad" "${HOME}/.xmonad"
    : >"${HOME}/.xmonad/xmonad.errors"

    pause
}

install_trizen
install_openssh

install_xorg
install_compton
install_xmonad
