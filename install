#!/usr/bin/env bash

# install
# author: Seong Yong-ju <sei40kr@gmail.com>

IFS=$'\n\t'

: "${XDG_CONFIG_HOME:=${HOME}/.config}"
: "${XDG_DATA_HOME:=${HOME}/.local/share}"

: "${XDG_PICTURES_DIR:=${HOME}/Pictures}"

: "${ZDOTDIR:=${HOME}/.zsh}"

: "${NVM_DIR:=${HOME}/.nvm}"
: "${GOENV_ROOT:=${HOME}/.goenv}"
: "${PYENV_ROOT:=${HOME}/.pyenv}"
: "${RBENV_ROOT:=${HOME}/.rbenv}"
: "${PERLBREW_ROOT:=${HOME}/perl5/perlbrew}"
: "${R_ENVIRON_USER:=${XDG_CONFIG_HOME}/r/.Renviron}"
: "${R_PROFILE_USER:=${XDG_CONFIG_HOME}/r/.Rprofile.r}"

declare -A ZPLGM
ZPLGM[HOME_DIR]="${HOME}/.zplugin"
ZPLGM[BIN_DIR]="${ZPLGM[HOME_DIR]}/bin"
ZPLGM[PLUGINS_DIR]="${ZPLGM[HOME_DIR]}/plugins"

basepath="$(dirname "$(realpath "$0")")"
# shellcheck source=install_helpers.bash
. "${basepath}/install_helpers.bash"

setup_basic() {
    install_trizen() {
        print_title 'Trizen'
        print_desc 'trizen is a lightweight wrapper for AUR, written in Perl.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        if ! pacman_query trizen; then
            pacman_sync base-devel git perl

            tmpdir="$(mktemp -d '/tmp/trizen-XXXXXXXXXX')"
            git clone -q https://aur.archlinux.org/trizen.git "$tmpdir"
            ( cd "$tmpdir"; makepkg -mis --noconfirm --needed )
        fi

        pause
    }

    install_fstrim() {
        print_title 'TRIM'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        sudo_systemctl_enable fstrim.timer

        pause
    }

    install_ntp() {
        print_title \
            'Network Time Protocol daemon - https://wiki.archlinux.org/index.php/Network_Time_Protocol_daemon'
        print_desc \
            'Network Time Protocol is the most common method to synchronize the software clock of a GNU/Linux system with internet time servers.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync ntp networkmanager-dispatcher-ntpd

        sudo timedatectl set-timezone Asia/Tokyo

        pause
    }

    install_networkmanager() {
        print_title \
            'Network Manager - https://wiki.archlinux.org/index.php/NetworkManager'
        print_desc \
            'NetworkManager is a program for providing detection and configuration for systems to automatically connect to networks.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync networkmanager dnsmasq dialog

        cat <<EOM | sudo tee /etc/NetworkManager/conf.d/dns.conf 2>/dev/null
[main]
dns=dnsmasq
EOM

        sudo mkdir -p /etc/NetworkManager/dnsmasq.d
        cat <<EOM | sudo tee /etc/NetworkManager/dnsmasq.d/cache.conf 2>/dev/null
cache-size=1024
EOM

        systemctl_enable NetworkManager.service

        pause
    }

    install_bluetooth() {
        print_title 'Bluetooth - https://wiki.archlinux.org/index.php/Bluetooth'
        print_desc \
            'Bluetooth is a standard for the short-range wireless interconnection of cellular phones, computers, and other electronic devices.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync bluez bluez-utils

        systemctl_enable bluetooth.service

        pause
    }

    install_tlp() {
        print_title \
            'TLP - TLP brings you the benefits of advanced power management for Linux without the need to understand every technical detail.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync tlp

        systemctl_enable tlp.service
        systemctl_enable tlp-sleep.service
        systemctl_mask systemd-rfkill.service
        systemctl_mask systemd-rfkill.socket

        pause
    }

    install_zsh() {
        print_title 'Zsh - https://wiki.archlinux.org/index.php/Zsh'
        print_desc \
            'Zsh is a powerful shell that operates as both an interactive shell and as a scripting language interpreter.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync zsh subversion

        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${HOME}/.zshenv"
        mkdir -p "${ZDOTDIR}"
        ln -fs "${HOME}/.dotfiles/zsh/zshenv" "${ZDOTDIR}/.zshenv"
        ln -fs "${HOME}/.dotfiles/zsh/zprofile" "${ZDOTDIR}/.zprofile"
        ln -fs "${HOME}/.dotfiles/zsh/zshrc" "${ZDOTDIR}/.zshrc"

        ln -fs "${HOME}/.dotfiles/zsh/alias_defs.zsh" "${ZDOTDIR}/alias_defs.zsh"

        mkdir -p "${ZDOTDIR}/functions"
        for zfunction in clone_gh create_gh kca kres pyclean ranger-cd; do
            ln -fs "${HOME}/.dotfiles/zsh/functions/${zfunction}" \
               "${ZDOTDIR}/functions/${zfunction}"
        done

        mkdir -p "${ZDOTDIR}/completions"
        for completion in _atcoder-tools _kubectl _rustup; do
            ln -fs "${HOME}/.dotfiles/zsh/completions/${completion}" \
               "${ZDOTDIR}/completions/${completion}"
        done

        if [[ ! -d "${ZPLGM[BIN_DIR]}" ]]; then
            mkdir -p "${ZPLGM[HOME_DIR]}"
            git clone -q https://github.com/zdharma/zplugin.git "${ZPLGM[BIN_DIR]}"
        fi

        mkdir -p "${ZPLGM[PLUGINS_DIR]}"
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-docker" ]]; then
            git clone -q https://github.com/sei40kr/zsh-fzf-docker.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-docker"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-gcloud" ]]; then
            git clone -q https://github.com/sei40kr/zsh-fzf-gcloud.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-gcloud"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-kubernetes" ]]; then
            git clone -q https://github.com/sei40kr/zsh-fzf-kubernetes.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-kubernetes"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fzf-projects" ]]; then
            git clone -q https://github.com/sei40kr/zsh-fzf-projects.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fzf-projects"
        fi
        if [[ ! -d "${ZPLGM[PLUGINS_DIR]}/_local---zsh-fast-alias-tips" ]]; then
            git clone -q https://github.com/sei40kr/zsh-fast-alias-tips.git \
                "${HOME}/.zplugin/plugins/_local---zsh-fast-alias-tips"
        fi

        ln -fs "${HOME}/.dotfiles/zsh/starship.toml" \
           "${XDG_CONFIG_HOME}/starship.toml"

        sudo chsh -s "$(command -v zsh)" "$USER"

        pause
    }

    install_tmux() {
        print_title 'tmux - https://wiki.archlinux.org/index.php/Tmux'
        print_desc \
            'tmux is a "terminal multiplexer: it enables a number of terminals (or windows), each running a separate program, to be created, accessed, and controlled from a single screen. tmux may be detached from a screen and continue running in the background, then later reattached."'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync tmux xsel

        ln -fs "${HOME}/tmux/tmux.conf" "${HOME}/.tmux.conf"

        if [[ ! -d "${HOME}/.tmux/plugins/tpm" ]]; then
            mkdir -p "${HOME}/.tmux/plugins"
            git clone -q https://github.com/tmux-plugins/tpm.git \
                "${HOME}/.tmux/plugins/tpm"

            "${HOME}/.tmux/plugins/tpm/bin/install_plugins"
        fi

        pause
    }

    install_openssh() {
        print_title 'OpenSSH - https://wiki.archlinux.org/index.php/OpenSSH'
        print_desc \
            'OpenSSH (OpenBSD Secure Shell) is a set of computer programs providing encrypted communication sessions over a computer network using the Secure Shell (SSH) protocol.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync openssh

        # TODO Prohibit password authentication

        # shellcheck disable=SC2174
        mkdir -pm 700 "${HOME}/.ssh"
        ln -fs "${HOME}/.dotfiles/ssh/config" "${HOME}/.ssh/config"

        git -C "${HOME}/.dotfiles" remote set-url origin \
            git@github-private:sei40kr/dotfiles.git

        systemctl_enable sshd.service

        pause
    }

    install_xorg() {
        print_title 'Xorg - https://wiki.archlinux.org/index.php/Xorg'
        print_desc \
            'The X.Org project provides an open source implementation of the X Window System.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync dbus xorg xdg-user-dirs xorg-xinit xautolock xsecurelock

        ln -fs "${HOME}/.dotfiles/xorg/xprofile" "${HOME}/.xprofile"
        ln -fs "${HOME}/.dotfiles/xorg/xinitrc" "${HOME}/.xinitrc"
        ln -fs "${HOME}/.dotfiles/xorg/Xresources" "${HOME}/.Xresources"
        ln -fs "${HOME}/.dotfiles/xorg/Xmodmap" "${HOME}/.Xmodmap"
        ln -fs "${HOME}/.dotfiles/xorg/xsession" "${HOME}/.xsession"

        LC_ALL=C xdg-user-dirs-update

        pause
    }

    install_fontconfig() {
        print_title \
            'Font configuration - https://wiki.archlinux.org/index.php/Font_configuration'
        print_desc \
            'Fontconfig is a library designed to provide a list of available fonts to applications, and also for configuration for how fonts get rendered.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync fontconfig freetype2 noto-fonts noto-fonts-cjk noto-fonts-emoji

        mkdir -p "${XDG_CONFIG_HOME}/fontconfig/conf.d"
        cp -f /etc/fonts/conf.avail/10-hinting-none.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-hinting-none.conf"
        cp -f /etc/fonts/conf.avail/10-sub-pixel-rgb.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/10-sub-pixel-rgb.conf"
        cp -f /etc/fonts/conf.avail/11-lcdfilter-default.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/11-lcdfilter-default.conf"
        cp -f /etc/fonts/conf.avail/66-noto-sans.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-sans.conf"
        cp -f /etc/fonts/conf.avail/66-noto-serif.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-serif.conf"
        cp -f /etc/fonts/conf.avail/66-noto-mono.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/66-noto-mono.conf"
        cp -f /etc/fonts/conf.avail/70-noto-cjk.conf \
           "${XDG_CONFIG_HOME}/fontconfig/conf.d/70-noto-cjk.conf"

        pause
    }

    install_trizen
    install_fstrim
    install_ntp
    install_networkmanager
    install_bluetooth
    install_tlp

    install_zsh
    install_tmux
    install_openssh

    install_xorg
    install_fontconfig
}

install_desktop_environment() {
    install_compton() {
        print_title 'Compton - https://wiki.archlinux.org/index.php/Compton'
        print_desc \
            'Compton is a standalone compositor for Xorg, suitable for use with window managers that do not provide compositing.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync compton mesa

        ln -fs "${HOME}/.dotfiles/compton/compton.conf" \
           "${XDG_CONFIG_HOME}/compton/compton.conf"

        pause
    }

    install_redshift() {
        print_title 'Redshift - https://wiki.archlinux.org/index.php/Redshift'
        print_desc \
            'Redshift adjusts the color temperature of your screen according to your surroundings.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync redshift

        mkdir -p "${XDG_CONFIG_HOME}/redshift/hooks"
        ln -fs "${HOME}/.dotfiles/redshift/redshift.conf" \
           "${XDG_CONFIG_HOME}/redshift/redshift.conf"
        ln -fs "${HOME}/.dotfiles/redshift/hooks/brightness.sh" \
           "${XDG_CONFIG_HOME}/redshift/hooks/brightness.sh"

        pause
    }

    install_xmonad() {
        print_title 'XMonad - https://wiki.archlinux.org/index.php/Xmonad'
        print_desc 'XMonad is a tiling window manager for X.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        stack_install xmonad
        pacman_sync xorg-xmessage scrot

        ln -fsT "${HOME}/.dotfiles/xmonad" "${HOME}/.xmonad"
        : >"${HOME}/.xmonad/xmonad.errors"

        mkdir -p "$XDG_PICTURES_DIR"

        pause
    }

    install_polybar() {
        print_title 'Polybar - https://wiki.archlinux.org/index.php/Polybar'
        print_desc \
            'polybar is a fast and easy-to-use tool for creating status bars.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        trizen_sync polybar ttf-material-design-icons-webfont

        mkdir -p "${XDG_CONFIG_HOME}/polybar"
        ln -fs "${HOME}/.dotfiles/polybar/config" \
           "${XDG_CONFIG_HOME}/polybar/config"
        ln -fsT "${HOME}/.dotfiles/polybar/scripts" "${HOME}/polybar-scripts"

        pause
    }

    install_xscreensaver() {
        print_title \
            'XScreenSaver - https://wiki.archlinux.org/index.php/XScreenSaver'
        print_desc \
            'XScreenSaver is a screen saver and locker for the X Window System.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync xscreensaver
        trizen_sync xwinwrap-git chromecast-wallpapers

        ln -fs "${HOME}/.dotfiles/xscreensaver/xscreensaver" \
           "${HOME}/.xscreensaver"

        pause
    }

    install_rofi() {
        print_title 'Rofi - https://wiki.archlinux.org/index.php/Rofi'
        print_desc \
            'Rofi is a window switcher, run dialog, ssh-launcher and dmenu replacement that started as a clone of simpleswitcher, written by Sean Pringle and later expanded by Dave Davenport.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync rofi

        mkdir -p "${XDG_CONFIG_HOME}/rofi"
        ln -fs "${HOME}/.dotfiles/rofi/config.rasi" \
           "${XDG_CONFIG_HOME}/rofi/config.rasi"
        ln -fs "${HOME}/.dotfiles/rofi/onedark.rasi" \
           "${XDG_CONFIG_HOME}/rofi/onedark.rasi"

        ln -fsT "${XDG_CONFIG_HOME}/rofi/scripts" "${HOME}/rofi-scripts"

        pause
    }

    install_clipmenu() {
        print_title 'clipmenu'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync clipmenu clipnotify

        mkdir -p "${XDG_CONFIG_HOME}/systemd/user"
        cat <<EOM >"${XDG_CONFIG_HOME}/systemd/user/clipmenud.service"
[Unit]
Description=Clipmenu daemon

[Service]
ExecStart=/usr/bin/clipmenud
Restart=always
RestartSec=0
Environment=DISPLAY=:0

MemoryDenyWriteExecute=yes
NoNewPrivileges=yes
ProtectControlGroups=yes
ProtectKernelTunables=yes
RestrictAddressFamilies=
RestrictRealtime=yes

[Install]
WantedBy=default.target
EOM

        systemctl_user_enable clipmenud.service

        pause
    }

    install_dunst() {
        print_title 'Dunst - https://wiki.archlinux.org/index.php/Dunst'
        print_desc \
            'Dunst is a lightweight replacement for the notification-daemons provided by most desktop environments.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync dunst

        mkdir -p "${XDG_CONFIG_HOME}/dunst"
        ln -fs "${HOME}/.dotfiles/dunst/dunstrc" \
           "${XDG_CONFIG_HOME}/dunst/dunstrc"

        pause
    }

    install_gtk() {
        print_title 'GTK - https://wiki.archlinux.org/index.php/GTK'
        print_desc \
            'GTK, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync gtk2 gtk3

        mkdir -p "${XDG_CONFIG_HOME}/gtk-3.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-3.0/settings.ini" \
           "${XDG_CONFIG_HOME}/gtk-3.0/settings.ini"
        mkdir -p "${XDG_CONFIG_HOME}/gtk-2.0"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkrc" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkrc"
        ln -fs "${HOME}/.dotfiles/gtk/gtk-2.0/gtkfilechooser.ini" \
           "${XDG_CONFIG_HOME}/gtk-2.0/gtkfilechooser.ini"

        pause
    }

    install_alacritty() {
        print_title 'Alacritty'
        print_desc 'A cross-platform, GPU-accelerated terminal emulator.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync alacritty

        mkdir -p "${XDG_CONFIG_HOME}/alacritty"
        ln -fs "${HOME}/.dotfiles/alacritty/alacritty.yml" \
           "${XDG_CONFIG_HOME}/alacritty/alacritty.yml"

        pause
    }

    install_thunar() {
        print_title 'Thunar - https://wiki.archlinux.org/index.php/Thunar'
        print_desc \
            'Thunar is a modern file manager for the Xfce Desktop Environment.'

        if ! read_yn 'Would you like to install?'; then
            return
        fi

        pacman_sync thunar

        pause
    }

    install_compton
    install_redshift

    install_xmonad
    install_polybar
    install_xscreensaver
    install_rofi
    install_clipmenu
    install_dunst

    install_gtk

    install_alacritty
    install_thunar
}

install_accessory_apps() {
    while true; do
        print_title 'Accessory Apps'

        echo "  1) $(pacman_menu_item 'Bitwarden' bitwarden-bin)"
        echo "  2) $(pacman_menu_item 'Calendar' gnome-calendar)"
        echo "  3) $(pacman_menu_item 'GoldenDict' goldendict)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                trizen_sync bitwarden-bin
                ;;
            2 )
                pacman_sync gnome-calendar
                ;;
            3 )
                pacman_sync goldendict
                ;;

            d )
                break
                ;;
        esac
    done
}

install_dev_apps() {
    install_spacemacs() {
        pacman_sync emacs cmake libvterm fbida

        if [[ ! -d "${HOME}/.emacs.d" ]]; then
            git clone -qb develop git@github.com:sei40kr/spacemacs.git \
                "${HOME}/.emacs.d"
            git -C "${HOME}/.emacs.d" -f upstream \
                https://github.com/syl20bnr/spacemacs.git

            mkdir -p "${HOME}/.emacs.d/private/layers"
        fi

        local local_pkgs=(
            emacs-atcoder-tools
            # snippets
            rails-snippets
            react-snippets
            redux-snippets
            jest-snippets
            competitive-programming-snippets
        )
        mkdir -p "${HOME}/.emacs.d/private/local"
        for pkg in "${local_pkgs[@]}"; do
            if [[ ! -d "${HOME}/.emacs.d/private/local/${pkg}" ]]; then
                git clone -q "ssh://git@github.com/sei40kr/${pkg}.git" \
                    "${HOME}/.emacs.d/private/local/${pkg}"
            fi
        done
    }

    install_intellij_idea_ue() {
        trizen_sync intellij-idea-ultimate-edition

        if [[ ! -d "${HOME}/intelli-space" ]]; then
            git clone -q https://github.com/MarcoIeni/intelli-space.git \
                "${HOME}/intelli-space"
        fi

        ln -fs "${HOME}/.dotfiles/intellij-idea/ideavimrc" "${HOME}/.ideavimrc"
    }

    while true; do
        print_title 'Development Apps'

        echo "  1) $(pacman_menu_item 'Vim' vim)"
        echo "  2) $(pacman_menu_item 'Git' git)"
        echo "  3) $(menu_item 'Spacemacs')"
        echo "  4) $(pacman_menu_item 'Visual Studio Code' visual-studio-code-bin)"
        echo "  5) $(pacman_menu_item 'IntelliJ IDEA Ultimate Edition' intellij-idea-ultimate-edition)"
        echo "  6) $(pacman_menu_item 'Zeal' zeal)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1)
                pacman_sync vim

                ln -fs "${HOME}/.dotfiles/vim/vimrc" "${HOME}/.vimrc"
                ;;
            2)
                pacman_sync git

                ln -fs "${HOME}/.dotfiles/git/gitconfig" \
                   "${XDG_CONFIG_HOME}/git/config"
                ln -fs "${HOME}/.dotfiles/git/gitignore" \
                   "${XDG_CONFIG_HOME}/git/ignore"
                ;;
            3)
                install_spacemacs
                ;;
            4)
                pacman_sync code
                ;;
            5)
                install_intellij_idea_ue
                ;;
            6)
                pacman_sync zeal
                ;;

            d )
                break
                ;;
        esac
    done
}

install_dev_tools() {
    install_c_dev_tools() {
        pacman_sync llvm gcc gdb gdb-dashboard clang
        pip_install system cpplint cmakelint

        ln -fs "/usr/share/gdb-dashboard/.gdbinit" "${HOME}/.gdbinit"
    }

    install_rust_dev_tools() {
        pacman_sync rustup

        rustup_toolchain_install stable

        rustup_component_add stable rls rust-analysis rust-src
    }

    install_go_dev_tools() {
        pacman_sync go dep

        if [[ ! -d "${GOENV_ROOT}" ]]; then
            git clone -q https://github.com/syndbg/goenv.git "$GOENV_ROOT"
        fi

        "${GOENV_ROOT}/bin/goenv" global system

        go_pkgs=(
            # editor tools
            # cf https://github.com/syl20bnr/spacemacs/blob/develop/layers/+lang/go/README.org#pre-requisites
            golang.org/x/tools/cmd/godoc
            golang.org/x/tools/cmd/goimports
            golang.org/x/tools/cmd/gorename
            golang.org/x/tools/cmd/guru
            github.com/cweill/gotests/...
            github.com/davidrjenni/reftools/cmd/fillstruct
            github.com/fatih/gomodifytags
            github.com/godoctor/godoctor
            github.com/haya14busa/gopkgs/cmd/gopkgs
            github.com/josharian/impl
            github.com/mdempsky/gocode
            github.com/rogpeppe/godef
            github.com/zmb3/gogetdoc
            # linters
            golang.org/x/lint/golint
            github.com/kisielk/errcheck
            github.com/mdempsky/unconvert
            # lsp
            golang.org/x/tools/gopls@latest
        )
        go_get system "${go_pkgs[@]}"
    }

    install_haskell_dev_tools() {
        stack_install hlint \
                      hindent \
                      stylish-haskell \
                      apply-refact \
                      hasktags \
                      hoogle
    }

    install_java_dev_tools() {
        while true; do
            print_title 'Java Development Tools'

            echo "  8) $(pacman_menu_item 'OpenJDK 8' jdk8-openjdk)"
            echo " 10) $(pacman_menu_item 'OpenJDK 10' jdk10-openjdk)"
            echo " 11) $(pacman_menu_item 'OpenJDK 11' jdk11-openjdk)"

            read -rp 'Choose which version to use: ' opt

            case "$opt" in
                8 )
                    pacman_sync jdk8-openjdk
                    break
                    ;;
                10 )
                    pacman_sync jdk10-openjdk
                    break
                    ;;
                11 )
                    pacman_sync jdk11-openjdk
                    break
                    ;;
            esac
        done

        pacman_sync maven \
                    gradle
        trizen_sync java-lombok \
                    google-java-format
    }

    install_scala_dev_tools() {
        pacman_sync scala \
                    sbt \
                    maven \
                    gradle
        trizen_sync scalastyle \
                    scalafmt-native \
                    metals \
                    java-lombok
    }

    install_python_dev_tools() {
        pacman_sync python python-pip poetry

        if [[ ! -d "${PYENV_ROOT}" ]]; then
            git clone -q https://github.com/pyenv/pyenv.git "$PYENV_ROOT"
        fi

        "${PYENV_ROOT}/bin/pyenv" global system

        local -a pip_pkgs
        pip_pkgs=(
            # Jupyter Notebook
            jupyter
            numpy
            pandas
            matplotlib
            # linters
            pylint
            # formatters
            flake8
            # lsp
            'python-language-server[all]'
            jedi
            pyls-mypy
            pyls-isort
            # debugger
            ptvsd
            # editor tools
            importmagic
            epc
            pydoc_utils
        )
        pip_install system "${pip_pkgs[@]}"

        mkdir -p "${XDG_CONFIG_HOME}/matplotlib"
        ln -fs "${HOME}/.dotfiles/matplotlib/matplotlibrc" \
           "${XDG_CONFIG_HOME}/matplotlib/matplotlibrc"
    }

    install_ruby_dev_tools() {
        local -a gems

        pacman_sync ruby

        if [[ ! -d "$RBENV_ROOT" ]]; then
            git clone -q https://github.com/rbenv/rbenv.git "$RBENV_ROOT"
        fi
        if [[ ! -d "${RBENV_ROOT}/plugins/ruby-build" ]]; then
            mkdir -p "${RBENV_ROOT}/plugins"
            git clone -q https://github.com/rbenv/ruby-build.git \
                "${RBENV_ROOT}/plugins/ruby-build"
        fi

        "${RBENV_ROOT}/bin/rbenv" global system

        gems=(
            rake
            pry
            pry-coolline
            pry-doc
            # linters
            rubocop
            # refactoring tools
            rcodetools
            fastri
            # debuggers
            seeing_is_believing
            # lsp
            solargraph
        )
        gem_install system "${gems[@]}"

        ln -fs "${HOME}/.dotfiles/pry/pryrc" "${HOME}/.pryrc"
    }

    install_perl_dev_tools() {
        pacman_sync perl cpanminus

        if [[ ! -d "$PERLBREW_ROOT" ]]; then
            pacman_sync perlbrew
            /usr/bin/vendor_perl/perlbrew init 1>/dev/null
        fi

        # TODO install some Perl modules
    }

    install_web_frontend_dev_tools() {
        local -a yarn_pkgs

        pacman_sync nodejs npm yarn

        if [[ ! -d "$NVM_DIR" ]]; then
            git clone -q https://github.com/nvm-sh/nvm.git "$NVM_DIR"
            ( cd "$NVM_DIR";
              git checkout "$(git tag --sort=version:refname | tail -n1)" )
        fi

        ( . "${NVM_DIR}/nvm.sh"
          nvm alias default system )

        yarn_pkgs=(
            # linters
            stylelint-cli
            eslint-cli
            eslint_d
            tslint
            # formatters
            prettier
            prettier-eslint-cli
            typescript-formatter
            # lsp
            vscode-html-languageserver-bin
            vscode-css-languageserver-bin
            javascript-typescript-langserver
            typescript-language-server
            # editor tools
            import-js
            # build tools
            typescript
        )
        yarn_global_add system "${yarn_pkgs[@]}"

        ln -fs "${HOME}/.dotfiles/import-js/importjs.js" "${HOME}/.importjs.js"
    }

    install_sql_dev_tools() {
        pip_install system sqlint sqlparse mycli pgcli litecli

        ln -fs "${HOME}/.dotfiles/mycli/myclirc" "${HOME}/.myclirc"
        ln -fs "${HOME}/.dotfiles/pgcli/pgclirc" "${HOME}/.pgclirc"
    }

    install_r_dev_tools() {
        pacman_sync r tk openblas

        ln -fs "${HOME}/.dotfiles/r/Renviron" "${HOME}/.Renviron"
        ln -fs "${HOME}/.dotfiles/r/Renviron" "$R_ENVIRON_USER"
        ln -fs "${HOME}/.dotfiles/r/Rprofile.r" "$R_PROFILE_USER"

        local r_libs=(
            # linters
            lintr
            # lsp
            languageserver
        )
        r_install "${r_libs[@]}"
    }

    install_shell_scripts_dev_tools() {
        pacman_sync shellcheck shfmt
        yarn_global_add system bash-language-server
    }

    install_markdown_dev_tools() {
        gem_install system mdl
        yarn_global_add system markdownlint-cli vmd
    }

    install_plantuml_dev_tools() {
        trizen_sync plantuml
    }

    install_ansible_dev_tools() {
        pip_install system ansible ansible-lint
    }

    install_docker_dev_tools() {
        pacman_sync docker docker-compose
        yarn_global_add system dockerfile-language-server-nodejs
    }

    install_atcoder_env() {
        local rust_version
        local go_version
        local python_version
        local ruby_version
        local node_version
        rust_version=1.15.1
        go_version=1.6.0
        python_version=3.4.3
        ruby_version=2.3.3
        node_version=v5.12.0

        rustup_toolchain_install "$rust_version"
        rustup_component_add "$rust_version" rust-src rls-preview rust-analysis

        goenv_install "$go_version"

        pyenv_install "$python_version"

        rbenv_install "$ruby_version"

        nvm_install "$node_version"

        pip_install system atcoder-tools online-judge-tools

        ln -fs "${HOME}/.dotfiles/atcoder-tools/atcodertools.toml" \
           "${HOME}/.atcodertools.toml"
        ln -fs "${HOME}/.dotfiles/atcoder-tools/custom_code_generator.py" \
           "${HOME}/custom_code_generator.py"
        ln -fs "${HOME}/.dotfiles/atcoder-tools/my_template.rs" \
           "${HOME}/my_template.rs"
    }

    install_leetcode_env() {
        local rust_version
        rust_version=1.31.0

        rustup_toolchain_install "$rust_version"
        rustup_component_add "$rust_version" rust-src rls-preview rust-analysis
    }

    while true; do
        print_title 'Development Tools'

        echo "  1) $(menu_item 'C')"
        echo "  2) $(menu_item 'Rust')"
        echo "  3) $(menu_item 'Go')"
        echo "  4) $(menu_item 'Haskell')"
        echo "  5) $(menu_item 'Java')"
        echo "  6) $(menu_item 'Scala')"
        echo "  7) $(menu_item 'Python')"
        echo "  8) $(menu_item 'Ruby')"
        echo "  9) $(menu_item 'Perl')"
        echo " 10) $(menu_item 'Web Frontend')"
        echo " 11) $(menu_item 'SQL')"
        echo " 12) $(menu_item 'R')"
        echo " 13) $(menu_item 'Shell Scripts')"
        echo " 14) $(menu_item 'Markdown')"
        echo " 15) $(menu_item 'PlantUML')"
        echo ''
        echo " 16) $(menu_item 'Ansible')"
        echo " 17) $(menu_item 'Docker')"
        echo ''
        echo " 18) $(menu_item 'AtCoder Environment')"
        echo " 19) $(menu_item 'LeetCode Environment')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                install_c_dev_tools
                ;;
            2 )
                install_rust_dev_tools
                ;;
            3 )
                install_go_dev_tools
                ;;
            4 )
                install_haskell_dev_tools
                ;;
            5 )
                install_java_dev_tools
                ;;
            6 )
                install_scala_dev_tools
                ;;
            7 )
                install_python_dev_tools
                ;;
            8 )
                install_ruby_dev_tools
                ;;
            9 )
                install_perl_dev_tools
                ;;
            10 )
                install_web_frontend_dev_tools
                ;;
            11 )
                install_sql_dev_tools
                ;;
            12 )
                install_r_dev_tools
                ;;
            13 )
                install_shell_scripts_dev_tools
                ;;
            14 )
                install_markdown_dev_tools
                ;;
            15 )
                install_plantuml_dev_tools
                ;;

            16 )
                install_ansible_dev_tools
                ;;
            17 )
                install_docker_dev_tools
                ;;
            18 )
                install_atcoder_env
                ;;
            19 )
                install_leetcode_env
                ;;

            d )
                break
                ;;
        esac
    done
}

install_office_apps() {
    install_texlive() {
        pacman_sync texlive-most texlive-langjapanese
    }

    while true; do
        print_title 'Office Apps'

        echo "  1) $(pacman_menu_item 'Toggl Desktop' toggldesktop-bin)"
        echo "  2) $(pacman_menu_item 'TeX Live' texlive-most texlive-langjapanese)"
        echo "  3) $(pacman_menu_item 'LibreOffice' libreoffice-fresh)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                trizen_sync toggldesktop-bin
                ;;
            2 )
                install_texlive
                ;;
            3 )
                pacman_sync libreoffice-fresh
                ;;

            d )
                break
                ;;
        esac
    done
}

install_system_apps() {
    while true; do
        print_title 'System Apps'

        echo "  1) $(pacman_menu_item 'htop' htop)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pacman_sync htop
                ;;

            d )
                break
                ;;
        esac
    done
}

install_graphics_apps() {
    while true; do
        print_title 'Graphics Apps'

        echo "  1) $(pacman_menu_item 'GIMP' gimp)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pacman_sync gimp
                ;;

            d )
                break
                ;;
        esac
    done
}

install_internet_apps() {
    install_web_browser() {
        while true; do
            print_title 'Web Browser'

            echo "  1) $(pacman_menu_item 'Google Chrome' google-chrome)"
            echo "  2) $(pacman_menu_item 'Firefox' firefox)"
            echo ''
            echo '  d) Done'

            read -rp 'Enter your option: ' opt

            case "$opt" in
                1 )
                    trizen_sync google-chrome
                    ;;
                2 )
                    pacman_sync firefox
                    ;;

                d )
                    break
                    ;;
            esac
        done
    }

    install_cloud_storage() {
        while true; do
            print_title 'Cloud Storage'

            echo "  1) $(pacman_menu_item 'Dropbox' dropbox)"
            echo ''
            echo '  d) Done'

            read -rp 'Enter your option: ' opt

            case "$opt" in
                1 )
                    if ! pacman_query dropbox; then
                        curl -qs 'https://linux.dropbox.com/fedora/rpm-public-key.asc' |
                            gpg --import - -q
                        trizen_sync dropbox
                    fi
                    ;;

                d )
                    break
                    ;;
            esac
        done
    }

    install_im() {
        while true; do
            print_title 'Instant Messenger Apps'

            echo "  1) $(pacman_menu_item 'Skype' skypeforlinux-stable-bin)"
            echo "  2) $(pacman_menu_item 'Zoom' zoom)"
            echo "  3) $(pacman_menu_item 'Slack' slack-desktop)"
            echo "  4) $(pacman_menu_item 'Gitter' gitter)"
            echo "  5) $(pacman_menu_item 'Discord' discord)"
            echo ''
            echo '  d) Done'

            read -rp 'Enter your option: ' opt

            case "$opt" in
                1 )
                    trizen_sync skypeforlinux-stable-bin
                    ;;
                2 )
                    trizen_sync zoom
                    ;;
                3 )
                    trizen_sync slack-desktop
                    ;;
                4 )
                    trizen_sync gitter
                    ;;
                5 )
                    pacman_sync discord
                    ;;

                d )
                    break
                    ;;
            esac
        done
    }

    while true; do
        print_title 'Internet Apps'

        echo "  1) $(menu_item 'Web Browser')"
        echo "  2) $(pacman_menu_item 'Geary' geary)"
        echo "  3) $(pacman_menu_item 'Fragments' fragments)"
        echo "  4) $(menu_item 'Cloud Storage')"
        echo "  5) $(pacman_menu_item 'Cawbird' cawbird)"
        echo ''
        echo "  6) $(menu_item 'Instant Messengers')"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                install_web_browser
                ;;
            2 )
                pacman_sync geary
                ;;
            3 )
                pacman_sync fragments
                ;;
            4 )
                install_cloud_storage
                ;;
            5 )
                pacman_sync cawbird
                ;;

            6 )
                install_im
                ;;

            d )
                break
                ;;
        esac
    done
}

# TODO implement this
install_audio_apps() {
    :
}

# TODO implement this
install_video_apps() {
    :
}

install_fonts() {
    while true; do
        print_title 'Fonts'

        echo "  1) $(pacman_menu_item 'Fira Code' otf-fira-code)"
        echo "  2) $(pacman_menu_item 'Input' ttf-input)"
        echo "  3) $(pacman_menu_item 'Dejavu' ttf-dejavu)"
        echo "  4) $(pacman_menu_item 'Inconsolata-g' ttf-inconsolata-g)"
        echo "  5) $(pacman_menu_item 'Source Code Pro' adobe-source-code-pro-fonts)"
        echo "  6) $(pacman_menu_item 'Ubuntu Font' ttf-ubuntu-font-family)"
        echo "  7) $(pacman_menu_item 'Anonymous Pro' ttf-anonymous-pro)"
        echo "  8) $(pacman_menu_item 'Meslo LG' ttf-meslo)"
        echo "  9) $(pacman_menu_item 'Hack' ttf-hack)"
        echo " 10) $(pacman_menu_item 'Iosevka' ttf-iosevka)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pacman_sync otf-fira-code
                ;;
            2 )
                trizen_sync ttf-input
                ;;
            3 )
                pacman_sync ttf-dejavu
                ;;
            4 )
                trizen_sync ttf-inconsolata-g
                ;;
            5 )
                pacman_sync adobe-source-code-pro-fonts
                ;;
            6 )
                pacman_sync ttf-ubuntu-font-family
                ;;
            7 )
                pacman_sync ttf-anonymous-pro
                ;;
            8 )
                trizen_sync ttf-meslo
                ;;
            9 )
                pacman_sync ttf-hack
                ;;
            10 )
                trizen_sync ttf-iosevka
                ;;

            d )
                break
                ;;
        esac
    done
}

install_i18n_apps() {
    while true; do
        print_title 'Internationalization Apps'

        echo "  1) $(pacman_menu_item 'Fcitx' fcitx fcitx-gtk2 fcitx-gtk3 fcitx-qt5 fcitx-configtool fcitx-mozc)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pacman_sync fcitx fcitx-gtk2 fcitx-gtk3 fcitx-qt5 \
                            fcitx-configtool fcitx-mozc

                mkdir -p "${XDG_CONFIG_HOME}/fcitx/conf"
                ln -fs "${HOME}/.dotfiles/fcitx/config" "${XDG_CONFIG_HOME}/fcitx/config"
                ln -fs "${HOME}/.dotfiles/fcitx/conf/fcitx-classic-ui.conf" \
                   "${XDG_CONFIG_HOME}/fcitx/conf/fcitx-classic-ui.conf"
                ;;

            d )
                break
                ;;
        esac
    done
}

install_extra_apps() {
    while true; do
        print_title 'Extra'

        echo "  1) $(menu_item 'asciinema')"
        echo "  2) $(pacman_menu_item 'Pandoc' pandoc wkhtmltopdf)"
        echo "  3) $(pacman_menu_item 'Profile-sync-daemon' profile-sync-daemon)"
        echo "  4) $(menu_item 'ranger')"
        echo "  5) $(pacman_menu_item 'ripgrep' ripgrep)"
        echo ''
        echo '  d) Done'

        read -rp 'Enter your option: ' opt

        case "$opt" in
            1 )
                pip_install asciinema
                ;;
            2 )
                pacman_sync pandoc wkhtmltopdf
                ;;
            3 )
                trizen_sync profile-sync-daemon

                systemctl_user_enable psd.service
                ;;
            4 )
                pip_install ranger-fm

                ln -fs "${HOME}/.dotfiles/ranger/rc.conf" \
                   "${XDG_CONFIG_HOME}/ranger/rc.conf"
                ln -fs "${HOME}/.dotfiles/ranger/commands.py" \
                   "${XDG_CONFIG_HOME}/ranger/commands.py"
                ;;
            5 )
                pacman_sync ripgrep

                ln -fs "${HOME}/.dotfiles/ripgrep/ripgreprc" "${HOME}/.ripgreprc"
                ;;

            d )
                break
                ;;
        esac
    done
}

declare -a visited

main_menu_item() {
    local no
    local title
    no="$1"
    title="$2"

    if [[ "${visited[$no]}" == 1 ]]; then
        printf "%2d) ${GREEN}☑${RESET} ${BOLD}%s${RESET}" "$no" "$title"
    else
        printf "%2d) ☐ ${BOLD}%s${RESET}" "$no" "$title"
    fi
}

while true; do
    print_title 'dotfiles - https://github.com/sei40kr/dotfiles'

    echo " $(main_menu_item  1 'Basic Setup')                  $(main_menu_item  2 'Desktop Environment')"
    echo " $(main_menu_item  3 'Accessory Apps')               $(main_menu_item  4 'Development Apps')"
    echo " $(main_menu_item  5 'Development Tools')            $(main_menu_item  6 'Office Apps')"
    echo " $(main_menu_item  7 'System Apps')                  $(main_menu_item  8 'Graphics Apps')"
    echo " $(main_menu_item  9 'Internet Apps')                $(main_menu_item 10 'Audio Apps')"
    echo " $(main_menu_item 11 'Video Apps')                   $(main_menu_item 12 'Fonts')"
    echo " $(main_menu_item 13 'Internationalization Apps')    $(main_menu_item 14 'Extra')"
    echo ''
    echo '  q) Quit'

    read -rp 'Enter your option: ' opt

    case "$opt" in
        1 )
            setup_basic
            visited[1]=1
            ;;
        2 )
            print_important 'You must run the Basic Setup at first'

            if ask_yn 'Are you sure to continue?'; then
                install_desktop_environment
            fi

            visited[2]=1
            ;;
        3 )
            install_accessory_apps
            visited[3]=1
            ;;
        4 )
            install_dev_apps
            visited[4]=1
            ;;
        5 )
            install_dev_tools
            visited[5]=1
            ;;
        6 )
            install_office_apps
            visited[6]=1
            ;;
        7 )
            install_system_apps
            visited[7]=1
            ;;
        8 )
            install_graphics_apps
            visited[8]=1
            ;;
        9 )
            install_internet_apps
            visited[9]=1
            ;;
        10 )
            install_audio_apps
            visited[10]=1
            ;;
        11 )
            install_video_apps
            visited[11]=1
            ;;
        12 )
            install_fonts
            visited[12]=1
            ;;
        13 )
            install_i18n_apps
            visited[13]=1
            ;;
        14 )
            install_extra_apps
            visited[14]=1
            ;;

        q )
            break
            ;;
    esac
done
