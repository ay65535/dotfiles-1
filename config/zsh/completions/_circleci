#compdef _circleci circleci


function _circleci {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "config:Operate on build config files"
      "diagnostic:Check the status of your CircleCI CLI."
      "help:Help about any command"
      "local:Debug jobs on the local machine"
      "namespace:Operate on namespaces"
      "orb:Operate on orbs"
      "setup:Setup the CLI with your credentials"
      "update:Update the tool to the latest version"
      "version:Display version information"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  config)
    _circleci_config
    ;;
  diagnostic)
    _circleci_diagnostic
    ;;
  help)
    _circleci_help
    ;;
  local)
    _circleci_local
    ;;
  namespace)
    _circleci_namespace
    ;;
  orb)
    _circleci_orb
    ;;
  setup)
    _circleci_setup
    ;;
  update)
    _circleci_update
    ;;
  version)
    _circleci_version
    ;;
  esac
}


function _circleci_config {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "pack:Pack up your CircleCI configuration into a single file."
      "process:Process the config."
      "validate:Check that the config file is well formed."
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  pack)
    _circleci_config_pack
    ;;
  process)
    _circleci_config_process
    ;;
  validate)
    _circleci_config_validate
    ;;
  esac
}

function _circleci_config_pack {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_config_process {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_config_validate {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_diagnostic {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_help {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}


function _circleci_local {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "execute:Run a job in a container on the local machine"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  execute)
    _circleci_local_execute
    ;;
  esac
}

function _circleci_local_execute {
  _arguments \
    '--branch[Git branch]:' \
    '--checkout-key[Git Checkout key]:' \
    '(-c --config)'{-c,--config}'[config file]:' \
    '(*-e *--env)'{\*-e,\*--env}'[Set environment variables, e.g. `-e VAR=VAL`]:' \
    '--index[node index of parallelism]:' \
    '--job[job to be executed]:' \
    '--node-total[total number of parallel nodes]:' \
    '--repo-url[Git Url]:' \
    '--revision[Git Revision]:' \
    '--skip-checkout[use local path as-is]' \
    '(*-v *--volume)'{\*-v,\*--volume}'[Volume bind-mounting]:' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}


function _circleci_namespace {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "create:Create a namespace"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  create)
    _circleci_namespace_create
    ;;
  esac
}

function _circleci_namespace_create {
  _arguments \
    '--no-prompt[Disable prompt to bypass interactive UI.]' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}


function _circleci_orb {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "create:Create an orb in the specified namespace"
      "info:Show the meta-data of an orb"
      "list:List orbs"
      "process:Validate an orb and print its form after all pre-registration processing"
      "publish:Publish an orb to the registry"
      "source:Show the source of an orb"
      "unlist:Disable or enable an orb's listing in the registry"
      "validate:Validate an orb.yml"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  create)
    _circleci_orb_create
    ;;
  info)
    _circleci_orb_info
    ;;
  list)
    _circleci_orb_list
    ;;
  process)
    _circleci_orb_process
    ;;
  publish)
    _circleci_orb_publish
    ;;
  source)
    _circleci_orb_source
    ;;
  unlist)
    _circleci_orb_unlist
    ;;
  validate)
    _circleci_orb_validate
    ;;
  esac
}

function _circleci_orb_create {
  _arguments \
    '--no-prompt[Disable prompt to bypass interactive UI.]' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_info {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_list {
  _arguments \
    '(-d --details)'{-d,--details}'[output all the commands, executors, and jobs, along with a tree of their parameters]' \
    '--sort[one of "builds"|"projects"|"orgs"]:' \
    '(-u --uncertified)'{-u,--uncertified}'[include uncertified orbs]' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_process {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}


function _circleci_orb_publish {
  local -a commands

  _arguments -C \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "increment:Increment a released version of an orb"
      "promote:Promote a development version of an orb to a semantic release"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  increment)
    _circleci_orb_publish_increment
    ;;
  promote)
    _circleci_orb_publish_promote
    ;;
  esac
}

function _circleci_orb_publish_increment {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_publish_promote {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_source {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_unlist {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_orb_validate {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}

function _circleci_setup {
  _arguments \
    '--no-prompt[Disable prompt to bypass interactive UI. (MUST supply --host and --token)]' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}


function _circleci_update {
  local -a commands

  _arguments -C \
    '--check[Check if there are any updates available without installing]' \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  esac
}

function _circleci_version {
  _arguments \
    '--host[URL to your CircleCI host, also CIRCLECI_CLI_HOST]:' \
    '--token[your token for using CircleCI, also CIRCLECI_CLI_TOKEN]:'
}
