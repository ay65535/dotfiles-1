[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'autozimu/languageclient-neovim'
hook_add = '''
let g:LanguageClient_autoStart = 1
let g:LanguageClient_serverCommands = {
    \   'javascript': [systemlist('npm prefix -g')[0]
    \       . '/lib/node_modules/javascript-typescript-langserver/lib/language-server-stdio.js']
    \ }
'''
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'chaoren/vim-wordmotion'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
hook_add = '''
let g:EditorConfig_core_mode = 'python_external'
let g:EditorConfig_exclude_patterns = ['scp://.*', 'fugitive://.*', 'gist:.*']
'''

[[plugins]]
repo = 'houtsnip/vim-emacscommandline'

[[plugins]]
repo = 'itchyny/lightline.vim'
depends = 'onedark.vim'
hook_add = '''
let g:lightline = {
    \   'colorscheme': 'onedark'
    \ }
'''

[[plugins]]
repo = 'joshdick/onedark.vim'

[[plugins]]
repo = 'kana/vim-textobj-entire'
depends = 'vim-textobj-user'

[[plugins]]
repo = 'kana/vim-textobj-user'

[[plugins]]
repo = 'kana/vim-operator-user'

[[plugins]]
repo = 'mattn/webapi-vim'

[[plugins]]
repo = 'sheerun/vim-polyglot'

[[plugins]]
repo = 'shougo/dein.vim'

[[plugins]]
repo = 'shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
hook_add = '''
function! g:Multiple_cursors_before()
  let g:deoplete#disable_auto_complete = 1
endfunction

function! g:Multiple_cursors_after()
  let g:deoplete#disable_auto_complete = 0
endfunction
'''

[[plugins]]
repo = 'thinca/vim-template'
hook_add = 'source ~/.vim/rc/plugins/vim-template.rc.vim'

[[plugins]]
repo = 'tpope/vim-sensible'

[[plugins]]
repo = 'shougo/neosnippet-snippets'

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
let g:ale_lint_on_save = 1
let g:ale_linters = {
    \   'cpp': ['clang', 'clangtidy', 'cppcheck', 'cpplint', 'gcc', 'clang-format'],
    \ }

let g:ale_dockerfile_hadolint_use_docker = 'yes'

let g:ale_echo_msg_error_str = 'E'
let g:ale_echo_msg_format = '[%linter%] %s'
let g:ale_echo_msg_warning_str = 'W'

nmap <silent> gne <Plug>(ale_next_wrap)
nmap <silent> gep <Plug>(ale_previous_wrap)
'''

