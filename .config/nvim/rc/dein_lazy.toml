[[plugins]]
repo = 'chiel92/vim-autoformat'
on_cmd = 'Autoformat'
hook_add = 'source ~/.vim/rc/plugins/vim-autoformat.rc.vim'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_map = {nx = '<Plug>(easymotion-'}
hook_add = '''
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_use_smartsign_jp = 1

nmap <Leader><Leader> <Plug>(easymotion-s)
'''

[[plugins]]
repo = 'edkolev/tmuxline.vim'
on_cmd = ['Tmuxline', 'TmuxlineSnapshot']
hook_add = '''
let g:tmuxline_preset = {
    \ 'win': '#I #W',
    \ 'cwin': '#I #W',
    \ 'z': '%R',
    \ 'options': {'status-justify': 'centre'}
    \ }
let g:tmuxline_separators = {
    \ 'left': '',
    \ 'left_alt': '|',
    \ 'right': '',
    \ 'right_alt': '|',
    \ 'space': ' '
    \ }
let g:tmuxline_theme = {
    \   'a': [145, 235],
    \   'b': [145, 235],
    \   'c': [145, 235],
    \   'x': [145, 235],
    \   'y': [145, 235],
    \   'z': [145, 235],
    \   'win': [145, 235],
    \   'cwin': [235, 39],
    \   'bg': [145, 235],
    \ }
'''

[[plugins]]
repo = 'junegunn/vim-easy-align'
on_map = {nx = ['<Plug>(EasyAlign)', '<Plug>(LiveEasyAlign)']}
hook_add = '''
nmap ga <Plug>(EasyAlign)
xmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'koron/codic-vim'
on_cmd = 'Codic'

[[plugins]]
repo = 'mattn/gist-vim'
depends = 'webapi-vim'
on_cmd = 'Gist'
hook_add = '''
let g:gist_detect_filetype = 1
'''

[[plugins]]
repo = 'osyo-manga/vim-jplus'
on_map = {nx = '<Plug>(jplus'}
hook_add = '''
let g:jplus#config = {
    \   '_' : {'delimiter_format': '%d'},
    \ }

nmap J <Plug>(jplus)
xmap J <Plug>(jplus)
'''

[[plugins]]
repo = 'rhysd/clever-f.vim'
on_map = {nox = '<Plug>(clever-'}
hook_add = '''
let g:clever_f_across_no_line = 1
let g:clever_f_ignore_case = 1
let g:clever_f_not_overwrites_standard_mappings = 1
let g:clever_f_show_prompt = 1
let g:clever_f_smart_case = 1

nmap F <Plug>(clever-f-F)
nmap T <Plug>(clever-f-T)
nmap f <Plug>(clever-f-f)
nmap t <Plug>(clever-f-t)
omap F <Plug>(clever-f-F)
omap T <Plug>(clever-f-T)
omap f <Plug>(clever-f-f)
omap t <Plug>(clever-f-t)
xmap F <Plug>(clever-f-F)
xmap T <Plug>(clever-f-T)
xmap f <Plug>(clever-f-f)
xmap t <Plug>(clever-f-t)
'''

[[plugins]]
repo = 'rizzatti/dash.vim'
on_if = "has('macunix')"
on_cmd = ['Dash', 'DashKeywords']

[[plugins]]
repo = 'shougo/denite.nvim'
on_cmd = ['Denite', 'DeniteBufferDir', 'DeniteCursorWord', 'DeniteProjectDir']
hook_add = '''
nnoremap <silent> <Space>f :<C-u>DeniteProjectDir
    \ `finddir('.git', ';') != '' ? 'file_rec/git' : 'file_rec'` -buffer-name=file-rec<CR>
nnoremap <silent> <Space>F :<C-u>DeniteProjectDir grep -buffer-name=grep<CR>
nnoremap <silent> <Space>n :<C-u>DeniteProjectDir grep -buffer-name=grep -immediately -resume -select=+1<CR>
nnoremap <silent> <Space>p :<C-u>DeniteProjectDir grep -buffer-name=grep -immediately -resume -select=-1<CR>
nnoremap <silent> <Space>o :<C-u>Denite outline -buffer-name=outline<CR>
nnoremap <silent> <Space>h :<C-u>Denite help -buffer-name=help<CR>
nnoremap <silent> / :<C-u>Denite line -buffer-name=search -auto-highlight<CR>
nnoremap <silent> * :<C-u>DeniteCursorWord line -auto-highlight -buffer-name=search -mode=normal<CR>
nnoremap <silent> # :<C-u>DeniteCursorWord line -auto-highlight -buffer-name=search -mode=normal<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/denite.rc.vim'
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'shougo/deoplete.nvim'
on_event = 'InsertEnter'
hook_source = 'source ~/.vim/rc/plugins/deoplete.rc.vim'
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'shougo/echodoc.vim'
on_event = 'CompleteDone'
hook_add = '''
let g:echodoc#enable_at_startup = 1
'''

[[plugins]]
repo = 'shougo/neoinclude.vim'
depends = 'deoplete.nvim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'shougo/neopairs.vim'
depends = 'deoplete.nvim'
on_event = 'InsertEnter'

[[plugins]]
repo = 'shougo/neosnippet'
depends = ['deoplete.nvim', 'neosnippet-snippets']
on_event = 'InsertEnter'
on_ft = 'snippet'
hook_source = '''
let g:neosnippet#enable_completed_snippet = 1
let g:neosnippet#enable_snipmate_compatibility = 1
let g:neosnippet#expand_word_boundary = 1
let g:neosnippet#snippets_directory = '~/.vim/snippets'

imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''

[[plugins]]
repo = 'shougo/unite.vim'
on_cmd = ['Unite', 'UniteWithCurrentDir', 'UniteWithBufferDir', 'UniteWithProjectDir', 'UniteWithInput',
    'UniteWithInputDirectory', 'UniteWithCursorWord', 'UniteResume', 'UniteClose', 'UniteNext', 'UnitePrevious',
    'UniteFirst', 'UniteLast', 'UniteDo', 'UniteBookmarkAdd']
hook_source = 'source ~/.vim/rc/plugins/unite.rc.vim'
hook_post_update = 'UpdateRemotePlugins'

[[plugins]]
repo = 'shougo/vimfiler.vim'
depends = 'unite.vim'
on_if = "isdirectory(bufname('%'))"
on_cmd = ['VimFiler', 'VimFilerCreate', 'VimFilerSimple', 'VimFilerSplit', 'VimFilerTab', 'VimFilerDouble',
    'VimFilerCurrentDir', 'VimFilerBufferDir', 'VimFilerExplorer', 'VimFilerClose', 'VimFilerEdit', 'VimFilerWrite',
    'VimFilerSource', 'VimFilerRead']
hook_add = '''
nnoremap <silent> <M-1> :<C-u>VimFiler<CR>
'''
hook_source = 'source ~/.vim/rc/plugins/vimfiler.rc.vim'

[[plugins]]
repo = 'terryma/vim-expand-region'
on_map = {nov = '<Plug>(expand_region_'}
hook_add = '''
map + <Plug>(expand_region_expand)
map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = 'QuickRun'
hook_add = '''
nnoremap <silent> <Space>r :<C-u>QuickRun -mode n<CR>
vnoremap <silent> <Space>r :<C-u>QuickRun -mode v<CR>
'''

hook_source = 'source ~/.vim/rc/plugins/vim-quickrun.rc.vim'
[[plugins]]
repo = 'tpope/vim-commentary'
on_map = {nox = '<Plug>Commentary'}
hook_add = '''
nmap gc <Plug>Commentary
nmap gcc <Plug>CommentaryLine
omap gc <Plug>Commentary
xmap gc <Plug>Commentary
'''

[[plugins]]
repo = 'tpope/vim-endwise'
on_event = 'InsertEnter'

[[plugins]]
repo = 'tpope/vim-fugitive'
on_cmd = ['Git', 'Gcd', 'Glcd', 'Gstatus', 'Gcommit', 'Gmerge', 'Gpull', 'Gpush', 'Gfetch', 'Ggrep', 'Glgrep', 'Glog',
    'Gllog', 'Gedit', 'Gsplit', 'Gvsplit', 'Gtabedit', 'Gpedit', 'Gread', 'Gwrite', 'Gwq', 'Gdiff', 'Gsdiff', 'Gvdiff',
    'Gmove', 'Gdelete', 'Gremove', 'Gblame', 'Gbrowse']

[[plugins]]
repo = 'tpope/vim-repeat'
on_map = {n = '<Plug>(Repeat'}

[[plugins]]
repo = 'tpope/vim-surround'
on_map = {invx = '<Plug>'}
hook_add = '''
let g:surround_no_mappings = 1

nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
nmap ds <Plug>Dsurround
nmap yS <Plug>YSurround
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap ys <Plug>Ysurround
nmap yss <Plug>Yssurround
xmap S <Plug>VSurround
xmap gS <Plug>VgSurround
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'

