{
  // Name of the predefined style used as a fallback in case clang-format is invoked with style "file" but the .clang-format file is not found. Possible values are Visual Studio, LLVM, Google, Chromium, Mozilla, WebKit, none, or use "{key: value, ...}" to set specific parameters, e.g.: "{ BasedOnStyle: LLVM, IndentWidth: 8 }"
  "C_Cpp.clang_format_fallbackStyle": "Google",

  // Absolute path for Crystal compiler executable.
  "crystal-lang.compiler": "~/.anyenv/envs/crenv/shims/crystal",

  // Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'
  "editor.cursorBlinking": "solid",

  // フォント サイズをピクセル単位で制御します。
  "editor.fontSize": 16,

  // フォント ファミリを制御します。
  "editor.fontFamily": "'FantasqueSansMono Nerd Font', monospace",

  // 行番号の表示を制御します。使用可能な値は、'on'、'off'、および 'relative' です。
  "editor.lineNumbers": "relative",

  // ミニマップを表示するかどうかを制御します
  "editor.minimap.enabled": false,

  // エディターで制御文字を表示する必要があるかどうかを制御します
  "editor.renderControlCharacters": true,

  // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": true,

  // Controls how lines should wrap. Can be:
  //  - 'off' (disable wrapping),
  //  - 'on' (viewport wrapping),
  //  - 'wordWrapColumn' (wrap at `editor.wordWrapColumn`) or
  //  - 'bounded' (wrap at minimum of viewport and `editor.wordWrapColumn`).
  "editor.wordWrap": "on",

  // 折り返し行のインデントを制御します。'none'、'same'、または 'indent' のいずれかを指定できます。
  "editor.wrappingIndent": "none",

  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
  //  Eg: {"vue-html": "html", "javascript": "javascriptreact"}
  "emmet.includeLanguages": {
    "vue-html": "html",
    "javascript": "javascriptreact"
  },

  // 有効にすると、TAB キーを押したときに Eemmet 省略記法が展開されます。
  "emmet.triggerExpansionOnTab": true,

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onSave",

  // Specifies whether or not to provide a blame annotation for the current line, by default
  // Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current session
  "gitlens.blame.line.enabled": false,

  // Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
  "prettier.eslintIntegration": true,

  // If true, will use single instead of double quotes
  "prettier.singleQuote": true,

  // Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.
  "prettier.stylelintIntegration": true,

  // Controls the printing of trailing commas wherever possible.
  //  Valid options:
  //     'none' - No trailing commas
  //     'es5' - Trailing commas where valid in ES5 (objects, arrays, etc)
  //     'all' - Trailing commas wherever possible (function arguments)
  "prettier.trailingComma": "es5",

  // Path to folder with a list of Virtual Environments (e.g. ~/.pyenv, ~/Envs, ~/.virtualenvs).
  "python.venvPath": "~/.anyenv/envs/pyenv",

  // Whether to enable bold text within the terminal, note that this requires support from the terminal shell.
  "terminal.integrated.enableBold": false,

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux
  "terminal.integrated.env.linux": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on OS X
  "terminal.integrated.env.osx": {},

  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows
  "terminal.integrated.env.windows": {},

  // Controls the font family of the terminal, this defaults to editor.fontFamily's value.
  "terminal.integrated.fontFamily": "'FantasqueSansMono Nerd Font', monospace",

  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 16,

  // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,

  // When typing a command show the initial colon ':' character
  "vim.cmdLineInitialColon": true,

  // Enable the EasyMotion plugin for Vim.
  "vim.easymotion": true,

  // Set the font family of the marker text.
  "vim.easymotionMarkerFontFamily": "'FantasqueSansMono Nerd Font', monospace",

  // Set the font size of the marker text.
  "vim.easymotionMarkerFontSize": "16",

  // Set the font weight of the marker text.
  "vim.easymotionMarkerFontWeight": "normal",

  // Uses a hack to move around folds properly
  "vim.foldfix": true,

  // Option to delegate certain key combinations back to VSCode to be handled natively
  "vim.handleKeys": {},

  // Show all matches of the most recent search pattern
  "vim.hlsearch": true,

  // Remapped keys in insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "k"],
      "after": ["<Esc>"]
    }
  ],

  // Non-recursive keybinding overrides to use for insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindingsNonRecursive": [],

  // What key should <leader> map to in remappings?
  "vim.leader": "<Space>",

  // Does dragging with the mouse put you into visual mode
  "vim.mouseSelectionGoesIntoVisualMode": false,

  // Remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.otherModesKeyBindings": [
    // Unimpaired Bindings
    // -------------------

    // Go to the previous error
    {
      "before": ["[", "l"],
      "after": ["<Leader>", "e", "p"]
    },
    {
      "before": ["[", "q"],
      "after": ["<Leader>", "e", "p"]
    },
    // Go to the next error
    {
      "before": ["]", "l"],
      "after": ["<Leader>", "e", "n"]
    },
    {
      "before": ["]", "q"],
      "after": ["<Leader>", "e", "n"]
    },

    // Custom Key Bindings
    // -------------------
    {
      "before": ["<C-q>"],
      "after": ["<C-w>"]
    }
  ],

  // Non-recursive remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.otherModesKeyBindingsNonRecursive": [
    // Unimpaired Bindings
    // -------------------

    // Insert space above
    {
      "before": ["[", "<Space>"],
      "after": ["O", "<Esc>"]
    },
    // Insert space below
    {
      "before": ["]", "<Space>"],
      "after": ["o", "<Esc>"]
    },

    // Move line up
    {
      "before": ["[", "e"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.moveLinesUpAction",
          "args": []
        }
      ]
    },
    // Move line down
    {
      "before": ["]", "e"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.moveLinesDownAction",
          "args": []
        }
      ]
    },

    // Go to the previous difference
    {
      "before": ["[", "c"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.dirtydiff.previous",
          "args": []
        }
      ]
    },
    // Go to the next difference
    {
      "before": ["]", "c"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.dirtydiff.next",
          "args": []
        }
      ]
    },

    // Go to the previous editor in group
    {
      "before": ["[", "t"],
      "after": ["g", "T"]
    },
    // Go to the next editor in group
    {
      "before": ["]", "t"],
      "after": ["g", "t"]
    },

    // Paste above current line
    {
      "before": ["[", "p"],
      "after": ["P"]
    },
    // Paste below current line
    {
      "before": ["]", "p"],
      "after": ["p"]
    },

    // Jumping
    // -------

    // go to the beginning of line (and set a mark at the previous location in the line)
    {
      "before": ["<Leader>", "j", "0"],
      "after": ["m", "`", "^"]
    },
    // go to the end of line (and set a mark at the previous location in the line)
    {
      "before": ["<Leader>", "j", "$"],
      "after": ["m", "`", "g", "_"]
    },

    // jump backward
    {
      "before": ["<Leader>", "j", "b"],
      "after": ["<C-o>"]
    },
    // jump forward
    {
      "before": ["<Leader>", "j", "f"],
      "after": ["<C-i>"]
    },

    // TODO jump to a listing of the current directory

    // TODO jump to a listing of the current directory (other window)

    // TODO jump to a definition in buffer (denite outline)

    // TODO jump to a definition in any buffer (denite outline)

    // jump to a character in the editor (easymotion)
    {
      "before": ["<Leader>", "j", "j"],
      "after": ["<Leader>", "<Leader>", "s"]
    },

    // jump to a suite of two characters in the buffer (easymotion)
    {
      "before": ["<Leader>", "j", "J"],
      "after": ["<Leader>", "<Leader>", "2", "s"]
    },

    // jump to next line and indent it using auto-indent rules
    {
      "before": ["<Leader>", "j", "k"],
      "after": ["j", "=", "="]
    },

    // jump to a line with avy (easymotion)
    {
      "before": ["<Leader>", "j", "l"],
      "after": ["<Leader>", "<Leader>", "<Leader>", "b", "d", "j", "k"]
    },

    // TODO show the dumb-jump quick look tooltip (TODO)

    // TODO jump to a URL in the current window

    // TODO jump to the definition/declaration of an Emacs Lisp variable (TODO)

    // jump to a word in the current buffer (easymotion)
    {
      "before": ["<Leader>", "j", "w"],
      "after": ["<Leader>", "<Leader>", "<Leader>", "b", "d", "w"]
    },

    // Joining and Splitting
    // ---------------------

    // split the current line at point, insert a new line and auto-indent
    {
      "before": ["<Leader>", "j", "n"],
      "after": ["i", "<CR>", "<Esc>"]
    },

    // split the current line at point but let point on current line
    {
      "before": ["<Leader>", "j", "o"],
      "after": ["i", "<CR>", "<Esc>", "k", "$"]
    },

    // TODO split a quoted string or s-expression in place

    // TODO split a quoted string or s-expression, insert a new line and auto-indent

    // Window Manipulation
    // -------------------

    {
      "before": ["<Leader>", "w", "S"],
      "after": [],
      "commands": [
        {
          "command": ":split",
          "args": []
        }
      ]
    },
    {
      "before": ["<Leader>", "s", "c"],
      "after": [],
      "commands": [
        {
          "command": ":nohlsearch",
          "args": []
        }
      ]
    },

    // Buffer Manipulation Key Bindings
    // --------------------------------

    // TODO switch to alternate buffer in the current window (switch back and forth)

    // TODO buffer transient state

    // TODO switch to a buffer (via denite/unite)

    // TODO kill the current buffer (does not delete the visited file)

    // TODO kill the current buffer and window (does not delete the visited file) (TODO)

    // TODO kill a visible buffer using vim-choosewin

    // TODO kill a visible buffer and its window using ace-window(TODO)

    // TODO kill other buffers

    // TODO kill buffers using a regular expression(TODO)

    // TODO erase the content of the buffer (ask for confirmation)

    // TODO open SpaceVim home buffer

    // TODO switch to next buffer avoiding special buffers

    // TODO open Messages buffer

    // TODO kill all buffers and windows except the current one(TODO)

    // TODO switch to previous buffer avoiding special buffers

    // TODO copy clipboard and replace buffer (useful when pasting from a browser)

    // TODO revert the current buffer (reload from disk)

    // TODO switch to the scratch buffer (create it if needed)

    // TODO toggle read-only (writable state)

    // copy whole buffer to clipboard (useful when copying to a browser)
    {
      "before": ["<Leader>", "b", "Y"],
      "after": ["g", "g", "V", "G", "\"", "+", "y"]
    },
    {
      "before": ["<Leader>", "b", "P"],
      "after": ["g", "g", "V", "G", "\"", "+", "P"]
    },

    // TODO Make current function or comments visible in buffer as much as possible (TODO)

    // TODO revert the curent buffer (reload from disk)

    // Format the current buffer
    {
      "before": ["<Leader>", "b", "f"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.formatDocument",
          "args": []
        }
      ]
    },

    // Create A New Empty Buffer
    // -------------------------

    // TODO create new empty buffer in a new window on the left

    // TODO create new empty buffer in a new window at the bottom

    // TODO create new empty buffer in a new window above

    // TODO create new empty buffer in a new window below

    // TODO create new empty buffer in current window

    // File Manipulations Key Bindings
    // -------------------------------

    {
      "before": ["Z", "Q"],
      "after": [],
      "commands": [
        {
          "command": ":quit!",
          "args": []
        }
      ]
    },
    {
      "before": ["Z", "Z"],
      "after": [],
      "commands": [
        {
          "command": ":wq",
          "args": []
        }
      ]
    },

    // TODO rename the current file

    // save a file
    {
      "before": ["<Leader>", "f", "s"],
      "after": [],
      "commands": [
        {
          "command": ":write",
          "args": []
        }
      ]
    },
    {
      "before": [";", "w"],
      "after": [],
      "commands": [
        {
          "command": ":write",
          "args": []
        }
      ]
    },

    // save all files
    {
      "before": ["<Leader>", "f", "S"],
      "after": [],
      "commands": [
        {
          "command": ":wall",
          "args": []
        }
      ]
    },

    // show file tree side bar
    {
      "before": ["<Leader>", "f", "T"],
      "after": [],
      "commands": [
        {
          "command": "workbench.view.explorer",
          "args": []
        }
      ]
    },

    // TODO show and copy current file absolute path

    // TODO copy current file absolute path

    // TODO copy current file to a different location

    // TODO delete a file and the associated buffer (ask for confirmation)

    // Searching in Current File
    // -------------------------

    // TODO search with the first found tool

    // TODO search with the first found tool with default input

    // Searching in an Arbitrary Directory
    // -----------------------------------

    // TODO search with the first found tool

    // TODO search with the first found tool with default input

    // Searching in a Project
    // ----------------------

    // TODO search with the first found tool

    // TODO search with the first found tool with default input

    // Persistent Highlighting
    // -----------------------

    // Clear the highlighting
    {
      "before": ["<Leader>", "s", "c"],
      "after": [],
      "commands": [
        {
          "command": ":nohlsearch"
        }
      ]
    },

    // Commenting
    // ----------

    // comment operator

    {
      "before": ["<Leader>", ";"],
      "after": ["g", "c"]
    },

    // TODO hide/show comments

    // comment lines
    {
      "before": ["<Leader>", "c", "l"],
      "after": ["g", "c"]
    },

    // invert comment lines
    {
      "before": ["<Leader>", "c", "L"],
      "after": ["g", "c"]
    },

    // comment paragraphs
    {
      "before": ["<Leader>", "c", "p"],
      "after": ["g", "c", "i", "p"]
    },

    // invert comment paragraphs
    {
      "before": ["<Leader>", "c", "P"],
      "after": ["g", "c", "i", "p"]
    },

    // comment to line
    {
      "before": ["<Leader>", "c", "t"],
      "after": ["g", "c", "c"]
    },

    // invert comment to line
    {
      "before": ["<Leader>", "c", "T"],
      "after": ["g", "c", "c"]
    },

    // TODO comment and yank

    // TODO invert comment and yank

    // Error Handling
    // --------------

    // TODO toggle syntax checker

    // TODO clear all errors

    // TODO describe a syntax checker

    // toggle the display of the list of errors/warnings
    {
      "before": ["<Leader>", "e", "l"],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.showErrorsWarnings",
          "args": []
        }
      ]
    },

    // go to the next error
    {
      "before": ["<Leader>", "e", "n"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.next",
          "args": []
        }
      ]
    },
    // go to the previous error
    {
      "before": ["<Leader>", "e", "p"],
      "after": [],
      "commands": [
        {
          "command": "editor.action.marker.prev",
          "args": []
        }
      ]
    },

    // TODO verify syntax checker setup (useful to debug 3rd party tools configuration)

    // TODO error transient state

    // Managing Projects
    // -----------------

    // open a shell in project's root
    {
      "before": ["<Leader>", "'"],
      "after": [],
      "commands": [
        {
          "command": "workbench.action.terminal.focus",
          "args": []
        }
      ]
    },

    // Searching Files in Project
    // --------------------------

    // TODO find files in current project

    // TODO fuzzy search for text in current project

    // TODO kill all buffers of current project

    // TODO find project root

    // list all projects
    {
      "before": ["<Leader>", "p", "p"],
      "after": [],
      "commands": [
        {
          "command": "projectManager.listProjects",
          "args": []
        }
      ]
    },

    // Custom Key Bindings
    // -------------------

    // Copy selection to X11 clipboard ("+y)
    {
      "before": [";", "y"],
      "after": ["\"", "+", "y"]
    },

    // Paste selection to X11 clipboard ("+p)
    {
      "before": [";", "p"],
      "after": ["\"", "+", "p"]
    },

    // Smart up and down
    {
      "before": ["<Up>"],
      "after": ["g", "k"]
    },
    {
      "before": ["<Down>"],
      "after": ["g", "j"]
    },

    // After paragraph motion go to first non-blank char (}^)
    {
      "before": ["}"],
      "after": ["}", "^"]
    },
    {
      "before": ["K"],
      "after": ["g", "h"]
    },
    {
      "before": ["g", "h"],
      "after": []
    },

    // File Operations
    // ---------------

    // TODO Switch to the directory of the open buffer

    // TODO Write (:w)

    // TODO Write (:w)

    // TODO Write as root (%!sudo tee > /dev/null %)

    // Editor UI
    // ---------

    // TODO Toggle tagbar

    // TODO Toggle Vimfiler

    // TODO Jump to the buffer with the num index

    // TODO Jump to the buffer with the num index, this only works in neovim

    // TODO Jump to left buffer in the tabline, this only works in neovim

    // TODO Jump to Right buffer in the tabline, this only works in neovim

    // TODO Toggle spell-checker (:setlocal spell!)

    // TODO Toggle line numbers (:setlocal nonumber!)

    // TODO Toggle hidden characters (:setlocal nolist!)

    // TODO Toggle highlighted search (:set hlsearch!)

    // TODO Toggle wrap (:setlocal wrap! breakindent!)

    // TODO Go to first tab (:tabfirst)

    // TODO Go to last tab (:tablast)

    // TODO Go to previous tab (:tabprevious)

    // TODO Move to split below (j)

    // TODO Move to upper split (k)

    // TODO Move to left split (h)

    // TODO Move to right split (l)

    // TODO selection forwards

    // TODO selection backwards

    // TODO Remove all spaces at EOL

    // TODO Replace selection

    // TODO Next on location list

    // TODO Previous on location list

    // TODO Source selection

    // Window Management
    // -----------------

    // TODO Smart buffer close

    // TODO Split nicely

    // TODO :split

    // TODO :vsplit

    // TODO Open new tab (:tabnew)

    // TODO Close other windows (:only)

    // TODO Remove buffer, leave blank window

    // TODO Closes current buffer (:close)

    // TODO Removes current buffer, left buffer in the tabline will be displayed, if there is no buffer on the left, the right buffer will be displayed, if this is the last buffer in the tabline, then an empty buffer will be displayed.

    // TODO Next window or tab

    // TODO Previous window or tab

    // TODO Split with previous buffer

    // TODO Vertical split with previous buffer

    // Plugin: vim-multiple-cursors

    {
      "before": ["<C-n>"],
      "after": ["g", "b"]
    }
  ],

  // Number of lines to scroll with CTRL-U and CTRL-D commands.
  "vim.scroll": 30,

  // Show the name of the current mode in the statusbar.
  "vim.showmodename": false,

  // Allow VSCodeVim to change status bar color based on mode
  "vim.statusBarColorControl": true,

  // Customize colors per mode when VSCodeVim controls status bar colors
  "vim.statusBarColors": {
    "normal": "#98c379",
    "insert": "#00af87",
    "visual": "#ff8700",
    "visualline": "#ff8700",
    "visualblock": "#ff8700",
    "replace": "#af5f5f"
  },

  // Enable the Surround plugin for Vim.
  "vim.surround": true,

  // Width to word-wrap to when using gq.
  "vim.textwidth": 80,

  // 現在選択している配色テーマで配色を上書きします。
  "workbench.colorCustomizations": {
    "activityBar.background": "#282c34",
    "editorCursor.foreground": "#abb2bf",
    "editorGroup.background": "#282c34",
    "sideBar.background": "#282c34",
    "statusBar.background": "#98c379",
    "statusBar.debuggingBackground": "#98c379",
    "statusBar.foreground": "#282c34",
    "statusBar.noFolderBackground": "#98c379",
    "tab.activeBackground": "#282c34",
    "terminal.ansiBlack": "#282c34",
    "terminal.ansiBlue": "#61afef",
    "terminal.ansiBrightBlack": "#3e4452",
    "terminal.ansiBrightBlue": "#61afef",
    "terminal.ansiBrightCyan": "#56b6c2",
    "terminal.ansiBrightGreen": "#98c379",
    "terminal.ansiBrightMagenta": "#c678dd",
    "terminal.ansiBrightRed": "#e06c75",
    "terminal.ansiBrightWhite": "#abb2bf",
    "terminal.ansiBrightYellow": "#e5c07b",
    "terminal.ansiCyan": "#56b6c2",
    "terminal.ansiGreen": "#98c379",
    "terminal.ansiMagenta": "#c678dd",
    "terminal.ansiRed": "#be5046",
    "terminal.ansiWhite": "#5c6370",
    "terminal.ansiYellow": "#d19a66",
    "terminal.background": "#282c34",
    "terminal.foreground": "#abb2bf",
    "terminalCursor.foreground": "#abb2bf"
  },

  // ワークベンチで使用する配色テーマを指定します。
  "workbench.colorTheme": "One Dark Pro",

  // Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
  "workbench.editor.showIcons": false,

  // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします。
  "workbench.editor.tabCloseButton": "off",

  // Specifies the icon theme used in the workbench or 'null' to not show any file icons.
  "workbench.iconTheme": null,

  // 前のセッションからエディターが復元されていない場合に、起動時に表示するかどうかを制御します。'none' を選択するとエディターなしで開始します。'welcomePage' を選択するとウェルカム ページを開きます (既定)。'newUntitledFile' を選択すると新しい無題のファイルを開きます (空のワークスペースを開いているときのみ)。
  "workbench.startupEditor": "newUntitledFile"
}
