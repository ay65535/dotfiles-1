{
  // フォント サイズをピクセル単位で制御します。
  "editor.fontSize": 16,
  // フォント ファミリを制御します。
  "editor.fontFamily": "'FantasqueSansMono Nerd Font', monospace",
  // 行番号の表示を制御します。使用可能な値は、'on'、'off'、および 'relative' です。
  "editor.lineNumbers": "relative",
  // ミニマップを表示するかどうかを制御します
  "editor.minimap.enabled": false,
  // エディターで制御文字を表示する必要があるかどうかを制御します
  "editor.renderControlCharacters": true,
  // Insert snippets when their prefix matches. Works best when 'quickSuggestions' aren't enabled.
  "editor.tabCompletion": true,
  // 折り返し行のインデントを制御します。'none'、'same'、または 'indent' のいずれかを指定できます。
  "editor.wrappingIndent": "indent",
  // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and emmet supported language.
  //  Eg: {"vue-html": "html", "javascript": "javascriptreact"}
  "emmet.includeLanguages": {
    "vue-html": "html",
    "javascript": "javascriptreact"
  },
  // 有効にすると、TAB キーを押したときに Eemmet 省略記法が展開されます。
  "emmet.triggerExpansionOnTab": true,
  // Specifies which messages should be suppressed
  "gitlens.advanced.messages": {
    "suppressCommitHasNoPreviousCommitWarning": false,
    "suppressCommitNotFoundWarning": false,
    "suppressFileNotUnderSourceControlWarning": false,
    "suppressGitVersionWarning": false,
    "suppressLineUncommittedWarning": false,
    "suppressNoRepositoryWarning": false,
    "suppressUpdateNotice": false,
    "suppressWelcomeNotice": true
  },
  // Use 'prettier-eslint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from eslint rules.
  "prettier.eslintIntegration": true,
  // Require a 'prettierconfig' to format
  "prettier.requireConfig": true,
  // Use 'prettier-stylelint' instead of 'prettier'. Other settings will only be fallbacks in case they could not be inferred from stylelint rules.
  "prettier.stylelintIntegration": true,
  // Whether to enable bold text within the terminal, note that this requires support from the terminal shell.
  "terminal.integrated.enableBold": false,
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Linux
  "terminal.integrated.env.linux": {},
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on OS X
  "terminal.integrated.env.osx": {},
  // Object with environment variables that will be added to the VS Code process to be used by the terminal on Windows
  "terminal.integrated.env.windows": {},
  // Controls the font family of the terminal, this defaults to editor.fontFamily's value.
  "terminal.integrated.fontFamily": "'FantasqueSansMono Nerd Font', monospace",
  // Controls the font size in pixels of the terminal.
  "terminal.integrated.fontSize": 16,
  // Controls the line height of the terminal, this number is multiplied by the terminal font size to get the actual line-height in pixels.
  "terminal.integrated.lineHeight": 1,
  // When typing a command show the initial colon ':' character
  "vim.cmdLineInitialColon": true,
  // Enable the EasyMotion plugin for Vim.
  "vim.easymotion": true,
  // Set the font family of the marker text.
  "vim.easymotionMarkerFontFamily": "'FantasqueSansMono Nerd Font', monospace",
  // Set the font size of the marker text.
  "vim.easymotionMarkerFontSize": "16",
  // Set the font weight of the marker text.
  "vim.easymotionMarkerFontWeight": "normal",
  // Uses a hack to move around folds properly
  "vim.foldfix": true,
  // Option to delegate certain key combinations back to VSCode to be handled natively
  "vim.handleKeys": {
    "<C-]>": false
  },
  // Show all matches of the most recent search pattern
  "vim.hlsearch": true,
  // Remapped keys in insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindings": [
    {
      "before": ["j", "k"],
      "after": ["<Esc>"]
    }
  ],
  // Non-recursive keybinding overrides to use for insert mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.insertModeKeyBindingsNonRecursive": [],
  // What key should <leader> map to in remappings?
  "vim.leader": ";",
  // Does dragging with the mouse put you into visual mode
  "vim.mouseSelectionGoesIntoVisualMode": false,
  // Remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.otherModesKeyBindings": [],
  // Non-recursive remapped keys in normal mode. Allows mapping to vim commands or vscode actions. See README for more.
  "vim.otherModesKeyBindingsNonRecursive": [
    {
      "before": ["[", "p"],
      "after": ["P"]
    },
    {
      "before": ["]", "p"],
      "after": ["p"]
    },
    {
      "before": ["[", "<Space>"],
      "after": ["O", "<Esc>"]
    },
    {
      "before": ["]", "<Space>"],
      "after": ["o", "<Esc>"]
    },
    {
      "before": ["[", "t"],
      "after": ["g", "T"]
    },
    {
      "before": ["]", "t"],
      "after": ["g", "t"]
    },
    {
      "before": ["<Up>"],
      "after": ["g", "k"]
    },
    {
      "before": ["<Down>"],
      "after": ["g", "j"]
    },
    {
      "before": ["}"],
      "after": ["}", "^"]
    },
    {
      "before": ["<Space>", "s", "c"],
      "after": [],
      "commands": [
        {
          "command": ":nohlsearch",
          "args": []
        }
      ]
    },
    {
      "before": [";", "y"],
      "after": ["\"", "+", "y"]
    },
    {
      "before": [";", "p"],
      "after": ["\"", "+", "p"]
    },
    {
      "before": ["<Space>", "f", "s"],
      "after": [],
      "commands": [
        {
          "command": ":write",
          "args": []
        }
      ]
    },
    {
      "before": ["<Leader>", "w"],
      "after": [],
      "commands": [
        {
          "command": ":write",
          "args": []
        }
      ]
    },
    {
      "before": ["<C-s>"],
      "after": [],
      "commands": [
        {
          "command": ":write",
          "args": []
        }
      ]
    },
    {
      "before": ["<Space>", "f", "S"],
      "after": [],
      "commands": [
        {
          "command": ":wall",
          "args": []
        }
      ]
    }
  ],
  // Number of lines to scroll with CTRL-U and CTRL-D commands.
  "vim.scroll": 30,
  // Allow VSCodeVim to change status bar color based on mode
  "vim.statusBarColorControl": true,
  // Customize colors per mode when VSCodeVim controls status bar colors
  "vim.statusBarColors": {
    "normal": "#98c379",
    "insert": "#00af87",
    "visual": "#ff8700",
    "visualline": "#ff8700",
    "visualblock": "#ff8700",
    "replace": "#af5f5f"
  },
  // Enable the Surround plugin for Vim.
  "vim.surround": true,
  // Width to word-wrap to when using gq.
  "vim.textwidth": 80,
  // 現在選択している配色テーマで配色を上書きします。
  "workbench.colorCustomizations": {
    "tab.activeBackground": "#282c34",
    "activityBar.background": "#282c34",
    "editorGroup.background": "#282c34",
    "sideBar.background": "#282c34",
    "statusBar.background": "#98c379",
    "statusBar.foreground": "#282c34",
    "statusBar.noFolderBackground": "#98c379",
    "statusBar.debuggingBackground": "#98c379"
  },
  // ワークベンチで使用する配色テーマを指定します。
  "workbench.colorTheme": "One Dark Pro",
  // Controls if opened editors should show with an icon or not. This requires an icon theme to be enabled as well.
  "workbench.editor.showIcons": false,
  // エディター タブの閉じるボタンの位置を制御するか、[off] に設定した場合に無効にします。
  "workbench.editor.tabCloseButton": "off",
  // 前のセッションからエディターが復元されていない場合に、起動時に表示するかどうかを制御します。'none' を選択するとエディターなしで開始します。'welcomePage' を選択するとウェルカム ページを開きます (既定)。'newUntitledFile' を選択すると新しい無題のファイルを開きます (空のワークスペースを開いているときのみ)。
  "workbench.startupEditor": "newUntitledFile"
}
